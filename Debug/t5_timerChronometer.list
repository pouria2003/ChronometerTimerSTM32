
t5_timerChronometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000613c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063bc  080063bc  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  080063bc  080063bc  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063bc  080063bc  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063bc  080063bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c0  080063c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080063c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f0  2**0
                  CONTENTS
 10 .bss          0000050c  200000f0  200000f0  000200f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005fc  200005fc  000200f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018dd5  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ca6  00000000  00000000  00038ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001320  00000000  00000000  0003cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb8b  00000000  00000000  0003e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019762  00000000  00000000  0005ce83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbec8  00000000  00000000  000765e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001324ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005af0  00000000  00000000  00132500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062b4 	.word	0x080062b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	080062b4 	.word	0x080062b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <uartError>:

enum TIMER_STATAE {
	START, PAUSE, TIMRESET
};

void uartError() {
 80002a0:	b598      	push	{r3, r4, r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	strcpy(data, "INVALID INPUT");
 80002a4:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <uartError+0x20>)
 80002a6:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <uartError+0x24>)
 80002a8:	4614      	mov	r4, r2
 80002aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ac:	c407      	stmia	r4!, {r0, r1, r2}
 80002ae:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, data, 13, 50);
 80002b0:	2332      	movs	r3, #50	; 0x32
 80002b2:	220d      	movs	r2, #13
 80002b4:	4902      	ldr	r1, [pc, #8]	; (80002c0 <uartError+0x20>)
 80002b6:	4804      	ldr	r0, [pc, #16]	; (80002c8 <uartError+0x28>)
 80002b8:	f004 f806 	bl	80042c8 <HAL_UART_Transmit>
}
 80002bc:	bf00      	nop
 80002be:	bd98      	pop	{r3, r4, r7, pc}
 80002c0:	2000001c 	.word	0x2000001c
 80002c4:	080062cc 	.word	0x080062cc
 80002c8:	2000025c 	.word	0x2000025c

080002cc <uartLog>:

void uartLog(uint8_t tmtype, uint8_t tmstate) {
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	b08b      	sub	sp, #44	; 0x2c
 80002d0:	af06      	add	r7, sp, #24
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
	(data, (tmtype == CHRONOMETER) ? "CHRONOMETER" : "TIMER");
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b00      	cmp	r3, #0
	sprintf(data, "[%s] : [%s] : [%d%d:%d%d]", (tmtype == CHRONOMETER) ? "CHRONOMETER" : "TIMER", (tmstate == START) ? "START" : (tmstate == PAUSE) ? "PAUSE" : "RESET", time[0], time[1], time[2], time[3], "\n");
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d101      	bne.n	80002ea <uartLog+0x1e>
 80002e6:	4a1b      	ldr	r2, [pc, #108]	; (8000354 <uartLog+0x88>)
 80002e8:	e000      	b.n	80002ec <uartLog+0x20>
 80002ea:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <uartLog+0x8c>)
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d006      	beq.n	8000300 <uartLog+0x34>
 80002f2:	79bb      	ldrb	r3, [r7, #6]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d101      	bne.n	80002fc <uartLog+0x30>
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <uartLog+0x90>)
 80002fa:	e002      	b.n	8000302 <uartLog+0x36>
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <uartLog+0x94>)
 80002fe:	e000      	b.n	8000302 <uartLog+0x36>
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <uartLog+0x98>)
 8000302:	4919      	ldr	r1, [pc, #100]	; (8000368 <uartLog+0x9c>)
 8000304:	7809      	ldrb	r1, [r1, #0]
 8000306:	4608      	mov	r0, r1
 8000308:	4917      	ldr	r1, [pc, #92]	; (8000368 <uartLog+0x9c>)
 800030a:	7849      	ldrb	r1, [r1, #1]
 800030c:	460c      	mov	r4, r1
 800030e:	4916      	ldr	r1, [pc, #88]	; (8000368 <uartLog+0x9c>)
 8000310:	7889      	ldrb	r1, [r1, #2]
 8000312:	460d      	mov	r5, r1
 8000314:	4914      	ldr	r1, [pc, #80]	; (8000368 <uartLog+0x9c>)
 8000316:	78c9      	ldrb	r1, [r1, #3]
 8000318:	460e      	mov	r6, r1
 800031a:	4914      	ldr	r1, [pc, #80]	; (800036c <uartLog+0xa0>)
 800031c:	9104      	str	r1, [sp, #16]
 800031e:	9603      	str	r6, [sp, #12]
 8000320:	9502      	str	r5, [sp, #8]
 8000322:	9401      	str	r4, [sp, #4]
 8000324:	9000      	str	r0, [sp, #0]
 8000326:	4912      	ldr	r1, [pc, #72]	; (8000370 <uartLog+0xa4>)
 8000328:	4812      	ldr	r0, [pc, #72]	; (8000374 <uartLog+0xa8>)
 800032a:	f005 fb55 	bl	80059d8 <siprintf>
	uint8_t length = (tmtype == TIMER ? 27 : 33);
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d101      	bne.n	8000338 <uartLog+0x6c>
 8000334:	231b      	movs	r3, #27
 8000336:	e000      	b.n	800033a <uartLog+0x6e>
 8000338:	2321      	movs	r3, #33	; 0x21
 800033a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, data, length, 100);
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	b29a      	uxth	r2, r3
 8000340:	2364      	movs	r3, #100	; 0x64
 8000342:	490c      	ldr	r1, [pc, #48]	; (8000374 <uartLog+0xa8>)
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <uartLog+0xac>)
 8000346:	f003 ffbf 	bl	80042c8 <HAL_UART_Transmit>
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000352:	bf00      	nop
 8000354:	080062dc 	.word	0x080062dc
 8000358:	080062e8 	.word	0x080062e8
 800035c:	080062f0 	.word	0x080062f0
 8000360:	080062f8 	.word	0x080062f8
 8000364:	08006300 	.word	0x08006300
 8000368:	20000014 	.word	0x20000014
 800036c:	08006324 	.word	0x08006324
 8000370:	08006308 	.word	0x08006308
 8000374:	2000001c 	.word	0x2000001c
 8000378:	2000025c 	.word	0x2000025c

0800037c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]

	if(uart_mode == 0) {
 8000384:	4b76      	ldr	r3, [pc, #472]	; (8000560 <HAL_UART_RxCpltCallback+0x1e4>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d146      	bne.n	800041a <HAL_UART_RxCpltCallback+0x9e>
		data[5] = '\0';
 800038c:	4b75      	ldr	r3, [pc, #468]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 800038e:	2200      	movs	r2, #0
 8000390:	715a      	strb	r2, [r3, #5]
//		HAL_UART_Transmit(&huart2, data, 6, 100);
		if(strcmp(data, "TIMER") == 0) {
 8000392:	4975      	ldr	r1, [pc, #468]	; (8000568 <HAL_UART_RxCpltCallback+0x1ec>)
 8000394:	4873      	ldr	r0, [pc, #460]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 8000396:	f7ff ff1b 	bl	80001d0 <strcmp>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d116      	bne.n	80003ce <HAL_UART_RxCpltCallback+0x52>
			uart_mode = 1;
 80003a0:	4b6f      	ldr	r3, [pc, #444]	; (8000560 <HAL_UART_RxCpltCallback+0x1e4>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
			last_chr_timer = 1;
 80003a6:	4b71      	ldr	r3, [pc, #452]	; (800056c <HAL_UART_RxCpltCallback+0x1f0>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	701a      	strb	r2, [r3, #0]
			strcpy(data, "SET TIME");
 80003ac:	4b6d      	ldr	r3, [pc, #436]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80003ae:	4a70      	ldr	r2, [pc, #448]	; (8000570 <HAL_UART_RxCpltCallback+0x1f4>)
 80003b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80003b2:	c303      	stmia	r3!, {r0, r1}
 80003b4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, data, 8, 50);
 80003b6:	2332      	movs	r3, #50	; 0x32
 80003b8:	2208      	movs	r2, #8
 80003ba:	496a      	ldr	r1, [pc, #424]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80003bc:	486d      	ldr	r0, [pc, #436]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 80003be:	f003 ff83 	bl	80042c8 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, data, 5);
 80003c2:	2205      	movs	r2, #5
 80003c4:	4967      	ldr	r1, [pc, #412]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80003c6:	486b      	ldr	r0, [pc, #428]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 80003c8:	f004 f8be 	bl	8004548 <HAL_UART_Receive_IT>
 80003cc:	e0c5      	b.n	800055a <HAL_UART_RxCpltCallback+0x1de>
		}
		else {
			HAL_UART_Receive(&huart2, data+5, 6, 100);
 80003ce:	496a      	ldr	r1, [pc, #424]	; (8000578 <HAL_UART_RxCpltCallback+0x1fc>)
 80003d0:	2364      	movs	r3, #100	; 0x64
 80003d2:	2206      	movs	r2, #6
 80003d4:	4867      	ldr	r0, [pc, #412]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 80003d6:	f004 f801 	bl	80043dc <HAL_UART_Receive>
			data[11] = '\0';
 80003da:	4b62      	ldr	r3, [pc, #392]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	72da      	strb	r2, [r3, #11]

			if (strcmp(data, "CHRONOMETER") == 0) {
 80003e0:	4966      	ldr	r1, [pc, #408]	; (800057c <HAL_UART_RxCpltCallback+0x200>)
 80003e2:	4860      	ldr	r0, [pc, #384]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80003e4:	f7ff fef4 	bl	80001d0 <strcmp>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d112      	bne.n	8000414 <HAL_UART_RxCpltCallback+0x98>
				initial_time[0] = initial_time[1] = initial_time[2] = initial_time[3] = 0;
 80003ee:	4b64      	ldr	r3, [pc, #400]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	70da      	strb	r2, [r3, #3]
 80003f4:	4b62      	ldr	r3, [pc, #392]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 80003f6:	78da      	ldrb	r2, [r3, #3]
 80003f8:	4b61      	ldr	r3, [pc, #388]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 80003fa:	709a      	strb	r2, [r3, #2]
 80003fc:	4b60      	ldr	r3, [pc, #384]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 80003fe:	789a      	ldrb	r2, [r3, #2]
 8000400:	4b5f      	ldr	r3, [pc, #380]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 8000402:	705a      	strb	r2, [r3, #1]
 8000404:	4b5e      	ldr	r3, [pc, #376]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 8000406:	785a      	ldrb	r2, [r3, #1]
 8000408:	4b5d      	ldr	r3, [pc, #372]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 800040a:	701a      	strb	r2, [r3, #0]
				last_chr_timer = 0;
 800040c:	4b57      	ldr	r3, [pc, #348]	; (800056c <HAL_UART_RxCpltCallback+0x1f0>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
 8000412:	e0a2      	b.n	800055a <HAL_UART_RxCpltCallback+0x1de>
			}
			else {
				uartError();
 8000414:	f7ff ff44 	bl	80002a0 <uartError>
 8000418:	e09f      	b.n	800055a <HAL_UART_RxCpltCallback+0x1de>
//			last_chr_timer = 1;
//			strcpy(data, "SET TIME");
//			HAL_UART_Transmit(&huart2, data, 8, 50);
//			HAL_UART_Receive_IT(&huart2, data, 5);
//			}
	} else if (uart_mode == 1) {
 800041a:	4b51      	ldr	r3, [pc, #324]	; (8000560 <HAL_UART_RxCpltCallback+0x1e4>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b01      	cmp	r3, #1
 8000420:	f040 809b 	bne.w	800055a <HAL_UART_RxCpltCallback+0x1de>
		uint8_t s0 = data[4] - '0';
 8000424:	4b4f      	ldr	r3, [pc, #316]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	3b30      	subs	r3, #48	; 0x30
 800042a:	73fb      	strb	r3, [r7, #15]
		if(s0 > 9 || s0 < 0){
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	2b09      	cmp	r3, #9
 8000430:	d912      	bls.n	8000458 <HAL_UART_RxCpltCallback+0xdc>
			uartError();
 8000432:	f7ff ff35 	bl	80002a0 <uartError>
			strcpy(data, "SET TIME");
 8000436:	4b4b      	ldr	r3, [pc, #300]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 8000438:	4a4d      	ldr	r2, [pc, #308]	; (8000570 <HAL_UART_RxCpltCallback+0x1f4>)
 800043a:	ca07      	ldmia	r2, {r0, r1, r2}
 800043c:	c303      	stmia	r3!, {r0, r1}
 800043e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, data, 8, 50);
 8000440:	2332      	movs	r3, #50	; 0x32
 8000442:	2208      	movs	r2, #8
 8000444:	4947      	ldr	r1, [pc, #284]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 8000446:	484b      	ldr	r0, [pc, #300]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 8000448:	f003 ff3e 	bl	80042c8 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, data, 5);
 800044c:	2205      	movs	r2, #5
 800044e:	4945      	ldr	r1, [pc, #276]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 8000450:	4848      	ldr	r0, [pc, #288]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 8000452:	f004 f879 	bl	8004548 <HAL_UART_Receive_IT>
			return;
 8000456:	e080      	b.n	800055a <HAL_UART_RxCpltCallback+0x1de>
		}
		uint8_t s1 = data[3] - '0';
 8000458:	4b42      	ldr	r3, [pc, #264]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 800045a:	78db      	ldrb	r3, [r3, #3]
 800045c:	3b30      	subs	r3, #48	; 0x30
 800045e:	73bb      	strb	r3, [r7, #14]
		if(s1 > 5 || s1 < 0) {
 8000460:	7bbb      	ldrb	r3, [r7, #14]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d912      	bls.n	800048c <HAL_UART_RxCpltCallback+0x110>
			uartError();
 8000466:	f7ff ff1b 	bl	80002a0 <uartError>
			strcpy(data, "SET TIME");
 800046a:	4b3e      	ldr	r3, [pc, #248]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 800046c:	4a40      	ldr	r2, [pc, #256]	; (8000570 <HAL_UART_RxCpltCallback+0x1f4>)
 800046e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000470:	c303      	stmia	r3!, {r0, r1}
 8000472:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, data, 8, 50);
 8000474:	2332      	movs	r3, #50	; 0x32
 8000476:	2208      	movs	r2, #8
 8000478:	493a      	ldr	r1, [pc, #232]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 800047a:	483e      	ldr	r0, [pc, #248]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 800047c:	f003 ff24 	bl	80042c8 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, data, 5);
 8000480:	2205      	movs	r2, #5
 8000482:	4938      	ldr	r1, [pc, #224]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 8000484:	483b      	ldr	r0, [pc, #236]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 8000486:	f004 f85f 	bl	8004548 <HAL_UART_Receive_IT>
			return;
 800048a:	e066      	b.n	800055a <HAL_UART_RxCpltCallback+0x1de>
		}
		uint8_t m0 = data[1] - '0';
 800048c:	4b35      	ldr	r3, [pc, #212]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 800048e:	785b      	ldrb	r3, [r3, #1]
 8000490:	3b30      	subs	r3, #48	; 0x30
 8000492:	737b      	strb	r3, [r7, #13]
		if(m0 > 9 || m0 < 0) {
 8000494:	7b7b      	ldrb	r3, [r7, #13]
 8000496:	2b09      	cmp	r3, #9
 8000498:	d912      	bls.n	80004c0 <HAL_UART_RxCpltCallback+0x144>
			uartError();
 800049a:	f7ff ff01 	bl	80002a0 <uartError>
			strcpy(data, "SET TIME");
 800049e:	4b31      	ldr	r3, [pc, #196]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80004a0:	4a33      	ldr	r2, [pc, #204]	; (8000570 <HAL_UART_RxCpltCallback+0x1f4>)
 80004a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004a4:	c303      	stmia	r3!, {r0, r1}
 80004a6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, data, 8, 50);
 80004a8:	2332      	movs	r3, #50	; 0x32
 80004aa:	2208      	movs	r2, #8
 80004ac:	492d      	ldr	r1, [pc, #180]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80004ae:	4831      	ldr	r0, [pc, #196]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 80004b0:	f003 ff0a 	bl	80042c8 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, data, 5);
 80004b4:	2205      	movs	r2, #5
 80004b6:	492b      	ldr	r1, [pc, #172]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80004b8:	482e      	ldr	r0, [pc, #184]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 80004ba:	f004 f845 	bl	8004548 <HAL_UART_Receive_IT>
			return;
 80004be:	e04c      	b.n	800055a <HAL_UART_RxCpltCallback+0x1de>
		}
		uint8_t m1 = data[0] - '0';
 80004c0:	4b28      	ldr	r3, [pc, #160]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	3b30      	subs	r3, #48	; 0x30
 80004c6:	733b      	strb	r3, [r7, #12]
		if(m1 > 5 || m1 < 0) {
 80004c8:	7b3b      	ldrb	r3, [r7, #12]
 80004ca:	2b05      	cmp	r3, #5
 80004cc:	d912      	bls.n	80004f4 <HAL_UART_RxCpltCallback+0x178>
			uartError();
 80004ce:	f7ff fee7 	bl	80002a0 <uartError>
			strcpy(data, "SET TIME");
 80004d2:	4b24      	ldr	r3, [pc, #144]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80004d4:	4a26      	ldr	r2, [pc, #152]	; (8000570 <HAL_UART_RxCpltCallback+0x1f4>)
 80004d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80004d8:	c303      	stmia	r3!, {r0, r1}
 80004da:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, data, 8, 50);
 80004dc:	2332      	movs	r3, #50	; 0x32
 80004de:	2208      	movs	r2, #8
 80004e0:	4920      	ldr	r1, [pc, #128]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80004e2:	4824      	ldr	r0, [pc, #144]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 80004e4:	f003 fef0 	bl	80042c8 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, data, 5);
 80004e8:	2205      	movs	r2, #5
 80004ea:	491e      	ldr	r1, [pc, #120]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80004ec:	4821      	ldr	r0, [pc, #132]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 80004ee:	f004 f82b 	bl	8004548 <HAL_UART_Receive_IT>
			return;
 80004f2:	e032      	b.n	800055a <HAL_UART_RxCpltCallback+0x1de>
		}
		if(data[2] != ':') {
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 80004f6:	789b      	ldrb	r3, [r3, #2]
 80004f8:	2b3a      	cmp	r3, #58	; 0x3a
 80004fa:	d012      	beq.n	8000522 <HAL_UART_RxCpltCallback+0x1a6>
			uartError();
 80004fc:	f7ff fed0 	bl	80002a0 <uartError>
			strcpy(data, "SET TIME");
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 8000502:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <HAL_UART_RxCpltCallback+0x1f4>)
 8000504:	ca07      	ldmia	r2, {r0, r1, r2}
 8000506:	c303      	stmia	r3!, {r0, r1}
 8000508:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, data, 8, 50);
 800050a:	2332      	movs	r3, #50	; 0x32
 800050c:	2208      	movs	r2, #8
 800050e:	4915      	ldr	r1, [pc, #84]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 8000510:	4818      	ldr	r0, [pc, #96]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 8000512:	f003 fed9 	bl	80042c8 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, data, 5);
 8000516:	2205      	movs	r2, #5
 8000518:	4912      	ldr	r1, [pc, #72]	; (8000564 <HAL_UART_RxCpltCallback+0x1e8>)
 800051a:	4816      	ldr	r0, [pc, #88]	; (8000574 <HAL_UART_RxCpltCallback+0x1f8>)
 800051c:	f004 f814 	bl	8004548 <HAL_UART_Receive_IT>
			return;
 8000520:	e01b      	b.n	800055a <HAL_UART_RxCpltCallback+0x1de>
		}
		initial_time[0] = time[0] = m1;
 8000522:	4a18      	ldr	r2, [pc, #96]	; (8000584 <HAL_UART_RxCpltCallback+0x208>)
 8000524:	7b3b      	ldrb	r3, [r7, #12]
 8000526:	7013      	strb	r3, [r2, #0]
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <HAL_UART_RxCpltCallback+0x208>)
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 800052e:	701a      	strb	r2, [r3, #0]
		initial_time[1] = time[1] = m0;
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <HAL_UART_RxCpltCallback+0x208>)
 8000532:	7b7b      	ldrb	r3, [r7, #13]
 8000534:	7053      	strb	r3, [r2, #1]
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <HAL_UART_RxCpltCallback+0x208>)
 8000538:	785a      	ldrb	r2, [r3, #1]
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 800053c:	705a      	strb	r2, [r3, #1]
		initial_time[2] = time[2] = s1;
 800053e:	4a11      	ldr	r2, [pc, #68]	; (8000584 <HAL_UART_RxCpltCallback+0x208>)
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	7093      	strb	r3, [r2, #2]
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_UART_RxCpltCallback+0x208>)
 8000546:	789a      	ldrb	r2, [r3, #2]
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 800054a:	709a      	strb	r2, [r3, #2]
		initial_time[3] = time[3] = s0;
 800054c:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <HAL_UART_RxCpltCallback+0x208>)
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	70d3      	strb	r3, [r2, #3]
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_UART_RxCpltCallback+0x208>)
 8000554:	78da      	ldrb	r2, [r3, #3]
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_UART_RxCpltCallback+0x204>)
 8000558:	70da      	strb	r2, [r3, #3]
	}

}
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200005d4 	.word	0x200005d4
 8000564:	2000001c 	.word	0x2000001c
 8000568:	080062e8 	.word	0x080062e8
 800056c:	200005d5 	.word	0x200005d5
 8000570:	08006328 	.word	0x08006328
 8000574:	2000025c 	.word	0x2000025c
 8000578:	20000021 	.word	0x20000021
 800057c:	080062dc 	.word	0x080062dc
 8000580:	200005d0 	.word	0x200005d0
 8000584:	20000014 	.word	0x20000014

08000588 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	2b01      	cmp	r3, #1
 8000596:	f040 8095 	bne.w	80006c4 <HAL_GPIO_EXTI_Callback+0x13c>
    {
    	static uint32_t last_time = 0;
    	static uint8_t last_state = 0;
    	if(HAL_GetTick() - last_time < 100)
 800059a:	f000 ff91 	bl	80014c0 <HAL_GetTick>
 800059e:	4602      	mov	r2, r0
 80005a0:	4b4a      	ldr	r3, [pc, #296]	; (80006cc <HAL_GPIO_EXTI_Callback+0x144>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	2b63      	cmp	r3, #99	; 0x63
 80005a8:	f240 808b 	bls.w	80006c2 <HAL_GPIO_EXTI_Callback+0x13a>
    		return ;
    	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) && last_state == 0) {
 80005ac:	2101      	movs	r1, #1
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f001 fa93 	bl	8001adc <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00c      	beq.n	80005d6 <HAL_GPIO_EXTI_Callback+0x4e>
 80005bc:	4b44      	ldr	r3, [pc, #272]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x148>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d108      	bne.n	80005d6 <HAL_GPIO_EXTI_Callback+0x4e>
	    	last_time = HAL_GetTick();
 80005c4:	f000 ff7c 	bl	80014c0 <HAL_GetTick>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a40      	ldr	r2, [pc, #256]	; (80006cc <HAL_GPIO_EXTI_Callback+0x144>)
 80005cc:	6013      	str	r3, [r2, #0]
	    	last_state = 1;
 80005ce:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x148>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	e076      	b.n	80006c4 <HAL_GPIO_EXTI_Callback+0x13c>
    	}
    	else if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80005d6:	2101      	movs	r1, #1
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005dc:	f001 fa7e 	bl	8001adc <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d16e      	bne.n	80006c4 <HAL_GPIO_EXTI_Callback+0x13c>
    		if(HAL_GetTick() - last_time >= 3000) {
 80005e6:	f000 ff6b 	bl	80014c0 <HAL_GetTick>
 80005ea:	4602      	mov	r2, r0
 80005ec:	4b37      	ldr	r3, [pc, #220]	; (80006cc <HAL_GPIO_EXTI_Callback+0x144>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d92e      	bls.n	8000658 <HAL_GPIO_EXTI_Callback+0xd0>
    			if(!stop) last_chr_timer = chr_timer;
 80005fa:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x14c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d103      	bne.n	800060a <HAL_GPIO_EXTI_Callback+0x82>
 8000602:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	4b35      	ldr	r3, [pc, #212]	; (80006dc <HAL_GPIO_EXTI_Callback+0x154>)
 8000608:	701a      	strb	r2, [r3, #0]
    			stop = 1;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x14c>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
    			chr_timer = 2;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000612:	2202      	movs	r2, #2
 8000614:	701a      	strb	r2, [r3, #0]
    			time[0] = initial_time[0];
 8000616:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x158>)
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x15c>)
 800061c:	701a      	strb	r2, [r3, #0]
    			time[1] = initial_time[1];
 800061e:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x158>)
 8000620:	785a      	ldrb	r2, [r3, #1]
 8000622:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000624:	705a      	strb	r2, [r3, #1]
    			time[2] = initial_time[2];
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x158>)
 8000628:	789a      	ldrb	r2, [r3, #2]
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x15c>)
 800062c:	709a      	strb	r2, [r3, #2]
    			time[3] = initial_time[3];
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x158>)
 8000630:	78da      	ldrb	r2, [r3, #3]
 8000632:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000634:	70da      	strb	r2, [r3, #3]
    			uartLog(last_chr_timer == 0 ? CHRONOMETER : TIMER, TIMRESET);
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <HAL_GPIO_EXTI_Callback+0x154>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	bf14      	ite	ne
 800063e:	2301      	movne	r3, #1
 8000640:	2300      	moveq	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe40 	bl	80002cc <uartLog>
    			last_time = HAL_GetTick();
 800064c:	f000 ff38 	bl	80014c0 <HAL_GetTick>
 8000650:	4603      	mov	r3, r0
 8000652:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <HAL_GPIO_EXTI_Callback+0x144>)
 8000654:	6013      	str	r3, [r2, #0]
 8000656:	e030      	b.n	80006ba <HAL_GPIO_EXTI_Callback+0x132>
    		}
    		else {
    			if(stop) {
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x14c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d012      	beq.n	8000686 <HAL_GPIO_EXTI_Callback+0xfe>
    				chr_timer = last_chr_timer;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <HAL_GPIO_EXTI_Callback+0x154>)
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000666:	701a      	strb	r2, [r3, #0]
    				stop = 0;
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x14c>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
        			uartLog(chr_timer == 0 ? CHRONOMETER : TIMER, START);
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf14      	ite	ne
 8000676:	2301      	movne	r3, #1
 8000678:	2300      	moveq	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fe24 	bl	80002cc <uartLog>
 8000684:	e014      	b.n	80006b0 <HAL_GPIO_EXTI_Callback+0x128>

    			}
    			else {
    				last_chr_timer = chr_timer;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <HAL_GPIO_EXTI_Callback+0x154>)
 800068c:	701a      	strb	r2, [r3, #0]
    				chr_timer = 2;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000690:	2202      	movs	r2, #2
 8000692:	701a      	strb	r2, [r3, #0]
    				stop = 1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
        			uartLog(last_chr_timer == 0 ? CHRONOMETER : TIMER, PAUSE);
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <HAL_GPIO_EXTI_Callback+0x154>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	bf14      	ite	ne
 80006a2:	2301      	movne	r3, #1
 80006a4:	2300      	moveq	r3, #0
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2101      	movs	r1, #1
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fe0e 	bl	80002cc <uartLog>

    			}
    			last_time = HAL_GetTick();
 80006b0:	f000 ff06 	bl	80014c0 <HAL_GetTick>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <HAL_GPIO_EXTI_Callback+0x144>)
 80006b8:	6013      	str	r3, [r2, #0]
    		}
			last_state = 0;
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x148>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e000      	b.n	80006c4 <HAL_GPIO_EXTI_Callback+0x13c>
    		return ;
 80006c2:	bf00      	nop
    	}
    }
}
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200005d8 	.word	0x200005d8
 80006d0:	200005dc 	.word	0x200005dc
 80006d4:	20000019 	.word	0x20000019
 80006d8:	20000018 	.word	0x20000018
 80006dc:	200005d5 	.word	0x200005d5
 80006e0:	200005d0 	.word	0x200005d0
 80006e4:	20000014 	.word	0x20000014

080006e8 <display_digit>:


void display_digit(uint8_t num, uint8_t digit, uint8_t dcpoint){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	460b      	mov	r3, r1
 80006f4:	71bb      	strb	r3, [r7, #6]
 80006f6:	4613      	mov	r3, r2
 80006f8:	717b      	strb	r3, [r7, #5]
	// Which of the four digits is this
	// Active high 7-segment, low pin -> digit on
    HAL_GPIO_WritePin(pin, bitActive0, digit == 0 ? 0 : 1);
 80006fa:	4b4e      	ldr	r3, [pc, #312]	; (8000834 <display_digit+0x14c>)
 80006fc:	6818      	ldr	r0, [r3, #0]
 80006fe:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <display_digit+0x150>)
 8000700:	8819      	ldrh	r1, [r3, #0]
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	2b00      	cmp	r3, #0
 8000706:	bf14      	ite	ne
 8000708:	2301      	movne	r3, #1
 800070a:	2300      	moveq	r3, #0
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	f001 f9fc 	bl	8001b0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bitActive1, digit == 1 ? 0 : 1);
 8000714:	4b47      	ldr	r3, [pc, #284]	; (8000834 <display_digit+0x14c>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	4b48      	ldr	r3, [pc, #288]	; (800083c <display_digit+0x154>)
 800071a:	8819      	ldrh	r1, [r3, #0]
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	2b01      	cmp	r3, #1
 8000720:	bf14      	ite	ne
 8000722:	2301      	movne	r3, #1
 8000724:	2300      	moveq	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	f001 f9ef 	bl	8001b0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bitActive2, digit == 2 ? 0 : 1);
 800072e:	4b41      	ldr	r3, [pc, #260]	; (8000834 <display_digit+0x14c>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <display_digit+0x158>)
 8000734:	8819      	ldrh	r1, [r3, #0]
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	2b02      	cmp	r3, #2
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	461a      	mov	r2, r3
 8000744:	f001 f9e2 	bl	8001b0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bitActive3, digit == 3 ? 0 : 1);
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <display_digit+0x14c>)
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	4b3d      	ldr	r3, [pc, #244]	; (8000844 <display_digit+0x15c>)
 800074e:	8819      	ldrh	r1, [r3, #0]
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	2b03      	cmp	r3, #3
 8000754:	bf14      	ite	ne
 8000756:	2301      	movne	r3, #1
 8000758:	2300      	moveq	r3, #0
 800075a:	b2db      	uxtb	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	f001 f9d5 	bl	8001b0c <HAL_GPIO_WritePin>

    // ABCD BCD Output
    HAL_GPIO_WritePin(pin, bit0, (num == 1 || num == 3 || num == 5 || num == 7 || num == 9));
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <display_digit+0x14c>)
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	4b38      	ldr	r3, [pc, #224]	; (8000848 <display_digit+0x160>)
 8000768:	8819      	ldrh	r1, [r3, #0]
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d00b      	beq.n	8000788 <display_digit+0xa0>
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b03      	cmp	r3, #3
 8000774:	d008      	beq.n	8000788 <display_digit+0xa0>
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b05      	cmp	r3, #5
 800077a:	d005      	beq.n	8000788 <display_digit+0xa0>
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b07      	cmp	r3, #7
 8000780:	d002      	beq.n	8000788 <display_digit+0xa0>
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b09      	cmp	r3, #9
 8000786:	d101      	bne.n	800078c <display_digit+0xa4>
 8000788:	2301      	movs	r3, #1
 800078a:	e000      	b.n	800078e <display_digit+0xa6>
 800078c:	2300      	movs	r3, #0
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	f001 f9bb 	bl	8001b0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bit1, (num == 2 || num == 3 || num == 6 || num == 7));
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <display_digit+0x14c>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <display_digit+0x164>)
 800079c:	8819      	ldrh	r1, [r3, #0]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d008      	beq.n	80007b6 <display_digit+0xce>
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d005      	beq.n	80007b6 <display_digit+0xce>
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b06      	cmp	r3, #6
 80007ae:	d002      	beq.n	80007b6 <display_digit+0xce>
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2b07      	cmp	r3, #7
 80007b4:	d101      	bne.n	80007ba <display_digit+0xd2>
 80007b6:	2301      	movs	r3, #1
 80007b8:	e000      	b.n	80007bc <display_digit+0xd4>
 80007ba:	2300      	movs	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	f001 f9a4 	bl	8001b0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bit2, (num == 4 || num == 5 || num == 6 || num == 7));
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <display_digit+0x14c>)
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <display_digit+0x168>)
 80007ca:	8819      	ldrh	r1, [r3, #0]
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	d008      	beq.n	80007e4 <display_digit+0xfc>
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b05      	cmp	r3, #5
 80007d6:	d005      	beq.n	80007e4 <display_digit+0xfc>
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d002      	beq.n	80007e4 <display_digit+0xfc>
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	d101      	bne.n	80007e8 <display_digit+0x100>
 80007e4:	2301      	movs	r3, #1
 80007e6:	e000      	b.n	80007ea <display_digit+0x102>
 80007e8:	2300      	movs	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	461a      	mov	r2, r3
 80007ee:	f001 f98d 	bl	8001b0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bit3, (num == 8 || num == 9));
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <display_digit+0x14c>)
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <display_digit+0x16c>)
 80007f8:	8819      	ldrh	r1, [r3, #0]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b08      	cmp	r3, #8
 80007fe:	d002      	beq.n	8000806 <display_digit+0x11e>
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b09      	cmp	r3, #9
 8000804:	d101      	bne.n	800080a <display_digit+0x122>
 8000806:	2301      	movs	r3, #1
 8000808:	e000      	b.n	800080c <display_digit+0x124>
 800080a:	2300      	movs	r3, #0
 800080c:	b2db      	uxtb	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	f001 f97c 	bl	8001b0c <HAL_GPIO_WritePin>

    // Is decimal point on or off for digit?
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, dcpoint == 1 ? 1 : 0);
 8000814:	797b      	ldrb	r3, [r7, #5]
 8000816:	2b01      	cmp	r3, #1
 8000818:	bf0c      	ite	eq
 800081a:	2301      	moveq	r3, #1
 800081c:	2300      	movne	r3, #0
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <display_digit+0x170>)
 8000828:	f001 f970 	bl	8001b0c <HAL_GPIO_WritePin>
//    HAL_Delay(delay);
  }
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000000 	.word	0x20000000
 8000838:	2000000c 	.word	0x2000000c
 800083c:	2000000e 	.word	0x2000000e
 8000840:	20000010 	.word	0x20000010
 8000844:	20000012 	.word	0x20000012
 8000848:	20000004 	.word	0x20000004
 800084c:	20000006 	.word	0x20000006
 8000850:	20000008 	.word	0x20000008
 8000854:	2000000a 	.word	0x2000000a
 8000858:	48000c00 	.word	0x48000c00

0800085c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a5d      	ldr	r2, [pc, #372]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d120      	bne.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x52>
		static digitno = 0;
		display_digit(time[digitno], digitno, digitno == 1);
 800086c:	4b5c      	ldr	r3, [pc, #368]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a5c      	ldr	r2, [pc, #368]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000872:	5cd0      	ldrb	r0, [r2, r3]
 8000874:	4b5a      	ldr	r3, [pc, #360]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	b2d9      	uxtb	r1, r3
 800087a:	4b59      	ldr	r3, [pc, #356]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	bf0c      	ite	eq
 8000882:	2301      	moveq	r3, #1
 8000884:	2300      	movne	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	461a      	mov	r2, r3
 800088a:	f7ff ff2d 	bl	80006e8 <display_digit>
		++digitno;
 800088e:	4b54      	ldr	r3, [pc, #336]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	4a52      	ldr	r2, [pc, #328]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000896:	6013      	str	r3, [r2, #0]
		digitno %= 4;
 8000898:	4b51      	ldr	r3, [pc, #324]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	425a      	negs	r2, r3
 800089e:	f003 0303 	and.w	r3, r3, #3
 80008a2:	f002 0203 	and.w	r2, r2, #3
 80008a6:	bf58      	it	pl
 80008a8:	4253      	negpl	r3, r2
 80008aa:	4a4d      	ldr	r2, [pc, #308]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80008ac:	6013      	str	r3, [r2, #0]
	}

	if(htim == &htim4) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a4d      	ldr	r2, [pc, #308]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	f040 808e 	bne.w	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
		if(chr_timer == 0) {
 80008b8:	4b4c      	ldr	r3, [pc, #304]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x190>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d13b      	bne.n	8000938 <HAL_TIM_PeriodElapsedCallback+0xdc>
			++time[3];
 80008c0:	4b48      	ldr	r3, [pc, #288]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008c2:	78db      	ldrb	r3, [r3, #3]
 80008c4:	3301      	adds	r3, #1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008ca:	70da      	strb	r2, [r3, #3]
				if(time[3] == 10) {
 80008cc:	4b45      	ldr	r3, [pc, #276]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008ce:	78db      	ldrb	r3, [r3, #3]
 80008d0:	2b0a      	cmp	r3, #10
 80008d2:	d17f      	bne.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
					time[3] = 0;
 80008d4:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	70da      	strb	r2, [r3, #3]
					++time[2];
 80008da:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008dc:	789b      	ldrb	r3, [r3, #2]
 80008de:	3301      	adds	r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b40      	ldr	r3, [pc, #256]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008e4:	709a      	strb	r2, [r3, #2]
					if(time[2] == 6) {
 80008e6:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008e8:	789b      	ldrb	r3, [r3, #2]
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d172      	bne.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
						time[2] = 0;
 80008ee:	4b3d      	ldr	r3, [pc, #244]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	709a      	strb	r2, [r3, #2]
						++time[1];
 80008f4:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008f6:	785b      	ldrb	r3, [r3, #1]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008fe:	705a      	strb	r2, [r3, #1]
						if(time[1] == 10) {
 8000900:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000902:	785b      	ldrb	r3, [r3, #1]
 8000904:	2b0a      	cmp	r3, #10
 8000906:	d165      	bne.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
							time[1] = 0;
 8000908:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800090a:	2200      	movs	r2, #0
 800090c:	705a      	strb	r2, [r3, #1]
							++time[0];
 800090e:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000918:	701a      	strb	r2, [r3, #0]
							time[0] %= 6;
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000920:	fba3 1302 	umull	r1, r3, r3, r2
 8000924:	0899      	lsrs	r1, r3, #2
 8000926:	460b      	mov	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	440b      	add	r3, r1
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	e04d      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
						}
					}
			}
		} else if (chr_timer == 1) {
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x190>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d149      	bne.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
			if(time[3] == 0) {
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000942:	78db      	ldrb	r3, [r3, #3]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d13f      	bne.n	80009c8 <HAL_TIM_PeriodElapsedCallback+0x16c>
				if(time[2] == time[1] == time[0] == 0) {
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800094a:	789a      	ldrb	r2, [r3, #2]
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800094e:	785b      	ldrb	r3, [r3, #1]
 8000950:	429a      	cmp	r2, r3
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	429a      	cmp	r2, r3
 8000962:	d003      	beq.n	800096c <HAL_TIM_PeriodElapsedCallback+0x110>
					// finish
					chr_timer = 2;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000966:	2202      	movs	r2, #2
 8000968:	701a      	strb	r2, [r3, #0]
					return;
 800096a:	e033      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
				}
				time[3] = 9;
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800096e:	2209      	movs	r2, #9
 8000970:	70da      	strb	r2, [r3, #3]
				if(time[2] == 0) {
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000974:	789b      	ldrb	r3, [r3, #2]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d11f      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x15e>
					time[2] = 5;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800097c:	2205      	movs	r2, #5
 800097e:	709a      	strb	r2, [r3, #2]
					if(time[1] == 0) {
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d111      	bne.n	80009ac <HAL_TIM_PeriodElapsedCallback+0x150>
						time[1] = 9;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800098a:	2209      	movs	r2, #9
 800098c:	705a      	strb	r2, [r3, #1]
						if(time[0] == 9)
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b09      	cmp	r3, #9
 8000994:	d103      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x142>
							time[0] = 5;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000998:	2205      	movs	r2, #5
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e01a      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
						else -- time[0];
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e013      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
					}
					else --time[1];
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80009b6:	705a      	strb	r2, [r3, #1]
 80009b8:	e00c      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
				}
				else --time[2];
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80009bc:	789b      	ldrb	r3, [r3, #2]
 80009be:	3b01      	subs	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80009c4:	709a      	strb	r2, [r3, #2]
 80009c6:	e005      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else --time[3];
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80009ca:	78db      	ldrb	r3, [r3, #3]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80009d2:	70da      	strb	r2, [r3, #3]


		}

		}
}
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200001c4 	.word	0x200001c4
 80009e0:	200005e0 	.word	0x200005e0
 80009e4:	20000014 	.word	0x20000014
 80009e8:	20000210 	.word	0x20000210
 80009ec:	20000018 	.word	0x20000018
 80009f0:	aaaaaaab 	.word	0xaaaaaaab

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b5b0      	push	{r4, r5, r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f000 fd08 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f000 f84a 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a00:	f000 fa1a 	bl	8000e38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a04:	f000 f8aa 	bl	8000b5c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a08:	f000 f8e8 	bl	8000bdc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a0c:	f000 f9f2 	bl	8000df4 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000a10:	f000 f9c0 	bl	8000d94 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a14:	f000 f920 	bl	8000c58 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000a18:	f000 f96c 	bl	8000cf4 <MX_TIM4_Init>

//  HAL_UART_Transmit(&huart2, data, 4, 100);



  strcpy(data, "CHOOSE[TIMER/CHRONOMETER]");
 8000a1c:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <main+0x88>)
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <main+0x8c>)
 8000a20:	4614      	mov	r4, r2
 8000a22:	461d      	mov	r5, r3
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2c:	c403      	stmia	r4!, {r0, r1}
 8000a2e:	8022      	strh	r2, [r4, #0]
  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8000a30:	4812      	ldr	r0, [pc, #72]	; (8000a7c <main+0x88>)
 8000a32:	f7ff fbd7 	bl	80001e4 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	490f      	ldr	r1, [pc, #60]	; (8000a7c <main+0x88>)
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <main+0x90>)
 8000a40:	f003 fc42 	bl	80042c8 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, data, 5);
 8000a44:	2205      	movs	r2, #5
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <main+0x88>)
 8000a48:	480e      	ldr	r0, [pc, #56]	; (8000a84 <main+0x90>)
 8000a4a:	f003 fd7d 	bl	8004548 <HAL_UART_Receive_IT>
  time[3] = time[2] = time[1] = time[0] = 0;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <main+0x94>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <main+0x94>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <main+0x94>)
 8000a5a:	705a      	strb	r2, [r3, #1]
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <main+0x94>)
 8000a5e:	785a      	ldrb	r2, [r3, #1]
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <main+0x94>)
 8000a62:	709a      	strb	r2, [r3, #2]
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <main+0x94>)
 8000a66:	789a      	ldrb	r2, [r3, #2]
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <main+0x94>)
 8000a6a:	70da      	strb	r2, [r3, #3]
  HAL_TIM_Base_Start_IT(&htim2);
 8000a6c:	4807      	ldr	r0, [pc, #28]	; (8000a8c <main+0x98>)
 8000a6e:	f002 ff9b 	bl	80039a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000a72:	4807      	ldr	r0, [pc, #28]	; (8000a90 <main+0x9c>)
 8000a74:	f002 ff98 	bl	80039a8 <HAL_TIM_Base_Start_IT>
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x84>
 8000a7a:	bf00      	nop
 8000a7c:	2000001c 	.word	0x2000001c
 8000a80:	08006334 	.word	0x08006334
 8000a84:	2000025c 	.word	0x2000025c
 8000a88:	20000014 	.word	0x20000014
 8000a8c:	200001c4 	.word	0x200001c4
 8000a90:	20000210 	.word	0x20000210

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09e      	sub	sp, #120	; 0x78
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a9e:	2228      	movs	r2, #40	; 0x28
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f004 ff90 	bl	80059c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab8:	463b      	mov	r3, r7
 8000aba:	223c      	movs	r2, #60	; 0x3c
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f004 ff82 	bl	80059c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000acc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ae4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ae8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fa34 	bl	8001f5c <HAL_RCC_OscConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000afa:	f000 fa47 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afe:	230f      	movs	r3, #15
 8000b00:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b02:	2302      	movs	r3, #2
 8000b04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fa5c 	bl	8002fd8 <HAL_RCC_ClockConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b26:	f000 fa31 	bl	8000f8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <SystemClock_Config+0xc4>)
 8000b2c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fc80 	bl	8003444 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b4a:	f000 fa1f 	bl	8000f8c <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3778      	adds	r7, #120	; 0x78
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	00020022 	.word	0x00020022

08000b5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b62:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <MX_I2C1_Init+0x78>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b68:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <MX_I2C1_Init+0x7c>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b98:	f000 ffe8 	bl	8001b6c <HAL_I2C_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ba2:	f000 f9f3 	bl	8000f8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000baa:	f001 f86e 	bl	8001c8a <HAL_I2CEx_ConfigAnalogFilter>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 f9ea 	bl	8000f8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000bbc:	f001 f8b0 	bl	8001d20 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bc6:	f000 f9e1 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000010c 	.word	0x2000010c
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	2000090e 	.word	0x2000090e

08000bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <MX_SPI1_Init+0x78>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000bf6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c12:	2208      	movs	r2, #8
 8000c14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c2a:	2207      	movs	r2, #7
 8000c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c36:	2208      	movs	r2, #8
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_SPI1_Init+0x74>)
 8000c3c:	f002 fdb2 	bl	80037a4 <HAL_SPI_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c46:	f000 f9a1 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000160 	.word	0x20000160
 8000c54:	40013000 	.word	0x40013000

08000c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (240-1);
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c80:	22ef      	movs	r2, #239	; 0xef
 8000c82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (1000-1);
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c9e:	4814      	ldr	r0, [pc, #80]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000ca0:	f002 fe2b 	bl	80038fa <HAL_TIM_Base_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000caa:	f000 f96f 	bl	8000f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000cbc:	f002 fffd 	bl	8003cba <HAL_TIM_ConfigClockSource>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cc6:	f000 f961 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_TIM2_Init+0x98>)
 8000cd8:	f003 fa0a 	bl	80040f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ce2:	f000 f953 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200001c4 	.word	0x200001c4

08000cf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d14:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <MX_TIM4_Init+0x9c>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4800-1;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d1a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000d1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d28:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d3a:	4814      	ldr	r0, [pc, #80]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d3c:	f002 fddd 	bl	80038fa <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000d46:	f000 f921 	bl	8000f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d58:	f002 ffaf 	bl	8003cba <HAL_TIM_ConfigClockSource>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000d62:	f000 f913 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d74:	f003 f9bc 	bl	80040f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000d7e:	f000 f905 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3720      	adds	r7, #32
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000210 	.word	0x20000210
 8000d90:	40000800 	.word	0x40000800

08000d94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <MX_USART2_UART_Init+0x5c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000da0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000da4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART2_UART_Init+0x58>)
 8000dd8:	f003 fa28 	bl	800422c <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000de2:	f000 f8d3 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000025c 	.word	0x2000025c
 8000df0:	40004400 	.word	0x40004400

08000df4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <MX_USB_PCD_Init+0x3c>)
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <MX_USB_PCD_Init+0x40>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USB_PCD_Init+0x3c>)
 8000e00:	2208      	movs	r2, #8
 8000e02:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <MX_USB_PCD_Init+0x3c>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USB_PCD_Init+0x3c>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <MX_USB_PCD_Init+0x3c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USB_PCD_Init+0x3c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_USB_PCD_Init+0x3c>)
 8000e1e:	f000 ffcb 	bl	8001db8 <HAL_PCD_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000e28:	f000 f8b0 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200002e4 	.word	0x200002e4
 8000e34:	40005c00 	.word	0x40005c00

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4e:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a4b      	ldr	r2, [pc, #300]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	4b46      	ldr	r3, [pc, #280]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a45      	ldr	r2, [pc, #276]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b43      	ldr	r3, [pc, #268]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	4b40      	ldr	r3, [pc, #256]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a3f      	ldr	r2, [pc, #252]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	4a39      	ldr	r2, [pc, #228]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6153      	str	r3, [r2, #20]
 8000ea2:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a33      	ldr	r2, [pc, #204]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b31      	ldr	r3, [pc, #196]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed0:	6153      	str	r3, [r2, #20]
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <MX_GPIO_Init+0x148>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000ee4:	4827      	ldr	r0, [pc, #156]	; (8000f84 <MX_GPIO_Init+0x14c>)
 8000ee6:	f000 fe11 	bl	8001b0c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000eea:	2200      	movs	r2, #0
 8000eec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ef0:	4825      	ldr	r0, [pc, #148]	; (8000f88 <MX_GPIO_Init+0x150>)
 8000ef2:	f000 fe0b 	bl	8001b0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000ef6:	2336      	movs	r3, #54	; 0x36
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000efa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481e      	ldr	r0, [pc, #120]	; (8000f84 <MX_GPIO_Init+0x14c>)
 8000f0c:	f000 fc6c 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f10:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000f14:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	4816      	ldr	r0, [pc, #88]	; (8000f84 <MX_GPIO_Init+0x14c>)
 8000f2a:	f000 fc5d 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f32:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f000 fc4f 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000f4a:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000f4e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	4809      	ldr	r0, [pc, #36]	; (8000f88 <MX_GPIO_Init+0x150>)
 8000f64:	f000 fc40 	bl	80017e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2006      	movs	r0, #6
 8000f6e:	f000 fb8e 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f72:	2006      	movs	r0, #6
 8000f74:	f000 fba7 	bl	80016c6 <HAL_NVIC_EnableIRQ>

}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	; 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48001000 	.word	0x48001000
 8000f88:	48000c00 	.word	0x48000c00

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_MspInit+0x44>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_MspInit+0x44>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_MspInit+0x44>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_MspInit+0x44>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_MspInit+0x44>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_MspInit+0x44>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fce:	2007      	movs	r0, #7
 8000fd0:	f000 fb52 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a17      	ldr	r2, [pc, #92]	; (800105c <HAL_I2C_MspInit+0x7c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d127      	bne.n	8001052 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_I2C_MspInit+0x80>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a16      	ldr	r2, [pc, #88]	; (8001060 <HAL_I2C_MspInit+0x80>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HAL_I2C_MspInit+0x80>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800101a:	23c0      	movs	r3, #192	; 0xc0
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102a:	2304      	movs	r3, #4
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <HAL_I2C_MspInit+0x84>)
 8001036:	f000 fbd7 	bl	80017e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_I2C_MspInit+0x80>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_I2C_MspInit+0x80>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_I2C_MspInit+0x80>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40005400 	.word	0x40005400
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400

08001068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <HAL_SPI_MspInit+0x7c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d128      	bne.n	80010dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_SPI_MspInit+0x80>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <HAL_SPI_MspInit+0x80>)
 8001090:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_SPI_MspInit+0x80>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_SPI_MspInit+0x80>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_SPI_MspInit+0x80>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_SPI_MspInit+0x80>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010ba:	23e0      	movs	r3, #224	; 0xe0
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ca:	2305      	movs	r3, #5
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f000 fb86 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40013000 	.word	0x40013000
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010fc:	d114      	bne.n	8001128 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_TIM_Base_MspInit+0x78>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_TIM_Base_MspInit+0x78>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	61d3      	str	r3, [r2, #28]
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_TIM_Base_MspInit+0x78>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	201c      	movs	r0, #28
 800111c:	f000 fab7 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001120:	201c      	movs	r0, #28
 8001122:	f000 fad0 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001126:	e018      	b.n	800115a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_TIM_Base_MspInit+0x7c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d113      	bne.n	800115a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_TIM_Base_MspInit+0x78>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <HAL_TIM_Base_MspInit+0x78>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_TIM_Base_MspInit+0x78>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	201e      	movs	r0, #30
 8001150:	f000 fa9d 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001154:	201e      	movs	r0, #30
 8001156:	f000 fab6 	bl	80016c6 <HAL_NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40000800 	.word	0x40000800

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_UART_MspInit+0x8c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d130      	bne.n	80011f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_UART_MspInit+0x90>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <HAL_UART_MspInit+0x90>)
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_UART_MspInit+0x90>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_UART_MspInit+0x90>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_UART_MspInit+0x90>)
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_UART_MspInit+0x90>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011be:	230c      	movs	r3, #12
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ce:	2307      	movs	r3, #7
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f000 fb04 	bl	80017e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2026      	movs	r0, #38	; 0x26
 80011e6:	f000 fa52 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ea:	2026      	movs	r0, #38	; 0x26
 80011ec:	f000 fa6b 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40004400 	.word	0x40004400
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a18      	ldr	r2, [pc, #96]	; (8001280 <HAL_PCD_MspInit+0x80>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d129      	bne.n	8001276 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_PCD_MspInit+0x84>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_PCD_MspInit+0x84>)
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	6153      	str	r3, [r2, #20]
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_PCD_MspInit+0x84>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800123a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800124c:	230e      	movs	r3, #14
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f000 fac5 	bl	80017e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_PCD_MspInit+0x84>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_PCD_MspInit+0x84>)
 8001264:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_PCD_MspInit+0x84>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40005c00 	.word	0x40005c00
 8001284:	40021000 	.word	0x40021000

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d4:	f000 f8e0 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012e0:	2001      	movs	r0, #1
 80012e2:	f000 fc2b 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM2_IRQHandler+0x10>)
 80012f2:	f002 fbc3 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001c4 	.word	0x200001c4

08001300 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <TIM4_IRQHandler+0x10>)
 8001306:	f002 fbb9 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000210 	.word	0x20000210

08001314 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <USART2_IRQHandler+0x10>)
 800131a:	f003 f959 	bl	80045d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000025c 	.word	0x2000025c

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f004 fb0c 	bl	8005974 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000a000 	.word	0x2000a000
 8001388:	00000400 	.word	0x00000400
 800138c:	200005e4 	.word	0x200005e4
 8001390:	20000600 	.word	0x20000600

08001394 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <SystemInit+0x20>)
 800139a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <SystemInit+0x20>)
 80013a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013bc:	f7ff ffea 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <LoopForever+0xe>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	; (8001404 <LoopForever+0x16>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f004 facb 	bl	8005980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ea:	f7ff fb03 	bl	80009f4 <main>

080013ee <LoopForever>:

LoopForever:
    b LoopForever
 80013ee:	e7fe      	b.n	80013ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80013fc:	080063c4 	.word	0x080063c4
  ldr r2, =_sbss
 8001400:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001404:	200005fc 	.word	0x200005fc

08001408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC1_2_IRQHandler>
	...

0800140c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_Init+0x28>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_Init+0x28>)
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f92b 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f808 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001428:	f7ff fdb6 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40022000 	.word	0x40022000

08001438 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f943 	bl	80016e2 <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f90b 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000080 	.word	0x20000080
 8001490:	20000088 	.word	0x20000088
 8001494:	20000084 	.word	0x20000084

08001498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000088 	.word	0x20000088
 80014bc:	200005e8 	.word	0x200005e8

080014c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200005e8 	.word	0x200005e8

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff3e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff31 	bl	800153c <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001708:	2b02      	cmp	r3, #2
 800170a:	d008      	beq.n	800171e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2204      	movs	r2, #4
 8001710:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e020      	b.n	8001760 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 020e 	bic.w	r2, r2, #14
 800172c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0201 	bic.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	2101      	movs	r1, #1
 8001748:	fa01 f202 	lsl.w	r2, r1, r2
 800174c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800177e:	2b02      	cmp	r3, #2
 8001780:	d005      	beq.n	800178e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2204      	movs	r2, #4
 8001786:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e027      	b.n	80017de <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 020e 	bic.w	r2, r2, #14
 800179c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f202 	lsl.w	r2, r1, r2
 80017bc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
    } 
  }
  return status;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e154      	b.n	8001aa2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8146 	beq.w	8001a9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d005      	beq.n	8001828 <HAL_GPIO_Init+0x40>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d130      	bne.n	800188a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185e:	2201      	movs	r2, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 0201 	and.w	r2, r3, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b03      	cmp	r3, #3
 8001894:	d017      	beq.n	80018c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d123      	bne.n	800191a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0203 	and.w	r2, r3, #3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80a0 	beq.w	8001a9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195c:	4b58      	ldr	r3, [pc, #352]	; (8001ac0 <HAL_GPIO_Init+0x2d8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a57      	ldr	r2, [pc, #348]	; (8001ac0 <HAL_GPIO_Init+0x2d8>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b55      	ldr	r3, [pc, #340]	; (8001ac0 <HAL_GPIO_Init+0x2d8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001974:	4a53      	ldr	r2, [pc, #332]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199e:	d019      	beq.n	80019d4 <HAL_GPIO_Init+0x1ec>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <HAL_GPIO_Init+0x2e0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d013      	beq.n	80019d0 <HAL_GPIO_Init+0x1e8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a48      	ldr	r2, [pc, #288]	; (8001acc <HAL_GPIO_Init+0x2e4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00d      	beq.n	80019cc <HAL_GPIO_Init+0x1e4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a47      	ldr	r2, [pc, #284]	; (8001ad0 <HAL_GPIO_Init+0x2e8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d007      	beq.n	80019c8 <HAL_GPIO_Init+0x1e0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a46      	ldr	r2, [pc, #280]	; (8001ad4 <HAL_GPIO_Init+0x2ec>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d101      	bne.n	80019c4 <HAL_GPIO_Init+0x1dc>
 80019c0:	2304      	movs	r3, #4
 80019c2:	e008      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019c4:	2305      	movs	r3, #5
 80019c6:	e006      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019c8:	2303      	movs	r3, #3
 80019ca:	e004      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e002      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019d4:	2300      	movs	r3, #0
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	f002 0203 	and.w	r2, r2, #3
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	4093      	lsls	r3, r2
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019e6:	4937      	ldr	r1, [pc, #220]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f4:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_GPIO_Init+0x2f0>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a18:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x2f0>)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <HAL_GPIO_Init+0x2f0>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a42:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <HAL_GPIO_Init+0x2f0>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x2f0>)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_GPIO_Init+0x2f0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_GPIO_Init+0x2f0>)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f47f aea3 	bne.w	80017f8 <HAL_GPIO_Init+0x10>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	48000400 	.word	0x48000400
 8001acc:	48000800 	.word	0x48000800
 8001ad0:	48000c00 	.word	0x48000c00
 8001ad4:	48001000 	.word	0x48001000
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fd14 	bl	8000588 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e081      	b.n	8001c82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fa24 	bl	8000fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d107      	bne.n	8001be6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	e006      	b.n	8001bf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d104      	bne.n	8001c06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69d9      	ldr	r1, [r3, #28]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1a      	ldr	r2, [r3, #32]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d138      	bne.n	8001d12 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e032      	b.n	8001d14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2224      	movs	r2, #36	; 0x24
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cdc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d12:	2302      	movs	r3, #2
  }
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d139      	bne.n	8001daa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e033      	b.n	8001dac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	; 0x24
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0201 	orr.w	r2, r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
  }
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dba:	b08b      	sub	sp, #44	; 0x2c
 8001dbc:	af06      	add	r7, sp, #24
 8001dbe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0c4      	b.n	8001f54 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fa0e 	bl	8001200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2203      	movs	r2, #3
 8001de8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 fd83 	bl	80058fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e040      	b.n	8001e7e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	3303      	adds	r3, #3
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	3338      	adds	r3, #56	; 0x38
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	333c      	adds	r3, #60	; 0x3c
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	3340      	adds	r3, #64	; 0x40
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3b9      	bcc.n	8001dfc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e044      	b.n	8001f18 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	3301      	adds	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3b5      	bcc.n	8001e8e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	687e      	ldr	r6, [r7, #4]
 8001f2a:	466d      	mov	r5, sp
 8001f2c:	f106 0410 	add.w	r4, r6, #16
 8001f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	602b      	str	r3, [r5, #0]
 8001f38:	1d33      	adds	r3, r6, #4
 8001f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f3c:	6838      	ldr	r0, [r7, #0]
 8001f3e:	f003 fcf8 	bl	8005932 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f6c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f001 b823 	b.w	8002fc8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 817d 	beq.w	8002292 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f98:	4bbc      	ldr	r3, [pc, #752]	; (800228c <HAL_RCC_OscConfig+0x330>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d00c      	beq.n	8001fbe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa4:	4bb9      	ldr	r3, [pc, #740]	; (800228c <HAL_RCC_OscConfig+0x330>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d15c      	bne.n	800206a <HAL_RCC_OscConfig+0x10e>
 8001fb0:	4bb6      	ldr	r3, [pc, #728]	; (800228c <HAL_RCC_OscConfig+0x330>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbc:	d155      	bne.n	800206a <HAL_RCC_OscConfig+0x10e>
 8001fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fd2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	095b      	lsrs	r3, r3, #5
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d102      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x94>
 8001fea:	4ba8      	ldr	r3, [pc, #672]	; (800228c <HAL_RCC_OscConfig+0x330>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	e015      	b.n	800201c <HAL_RCC_OscConfig+0xc0>
 8001ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002008:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800200c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002018:	4b9c      	ldr	r3, [pc, #624]	; (800228c <HAL_RCC_OscConfig+0x330>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002020:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002024:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002030:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002034:	fab2 f282 	clz	r2, r2
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	f042 0220 	orr.w	r2, r2, #32
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	f002 021f 	and.w	r2, r2, #31
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f202 	lsl.w	r2, r1, r2
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 811f 	beq.w	8002290 <HAL_RCC_OscConfig+0x334>
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 8116 	bne.w	8002290 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	f000 bfaf 	b.w	8002fc8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x12e>
 800207c:	4b83      	ldr	r3, [pc, #524]	; (800228c <HAL_RCC_OscConfig+0x330>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a82      	ldr	r2, [pc, #520]	; (800228c <HAL_RCC_OscConfig+0x330>)
 8002082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	e036      	b.n	80020f8 <HAL_RCC_OscConfig+0x19c>
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x158>
 800209a:	4b7c      	ldr	r3, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x330>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7b      	ldr	r2, [pc, #492]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b79      	ldr	r3, [pc, #484]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a78      	ldr	r2, [pc, #480]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e021      	b.n	80020f8 <HAL_RCC_OscConfig+0x19c>
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x184>
 80020c6:	4b71      	ldr	r3, [pc, #452]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a70      	ldr	r2, [pc, #448]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b6e      	ldr	r3, [pc, #440]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6d      	ldr	r2, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e00b      	b.n	80020f8 <HAL_RCC_OscConfig+0x19c>
 80020e0:	4b6a      	ldr	r3, [pc, #424]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a69      	ldr	r2, [pc, #420]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	4b67      	ldr	r3, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a66      	ldr	r2, [pc, #408]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020f8:	4b64      	ldr	r3, [pc, #400]	; (800228c <HAL_RCC_OscConfig+0x330>)
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f023 020f 	bic.w	r2, r3, #15
 8002100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	495f      	ldr	r1, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x330>)
 800210e:	4313      	orrs	r3, r2
 8002110:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d059      	beq.n	80021d6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff f9cd 	bl	80014c0 <HAL_GetTick>
 8002126:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff f9c8 	bl	80014c0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d902      	bls.n	8002142 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	f000 bf43 	b.w	8002fc8 <HAL_RCC_OscConfig+0x106c>
 8002142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002146:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002156:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d102      	bne.n	8002174 <HAL_RCC_OscConfig+0x218>
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_OscConfig+0x330>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	e015      	b.n	80021a0 <HAL_RCC_OscConfig+0x244>
 8002174:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002178:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800218c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002190:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800219c:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_RCC_OscConfig+0x330>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021a4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80021a8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80021ac:	fa92 f2a2 	rbit	r2, r2
 80021b0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80021b4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80021b8:	fab2 f282 	clz	r2, r2
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f042 0220 	orr.w	r2, r2, #32
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f002 021f 	and.w	r2, r2, #31
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ab      	beq.n	800212c <HAL_RCC_OscConfig+0x1d0>
 80021d4:	e05d      	b.n	8002292 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff f973 	bl	80014c0 <HAL_GetTick>
 80021da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff f96e 	bl	80014c0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b64      	cmp	r3, #100	; 0x64
 80021ee:	d902      	bls.n	80021f6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	f000 bee9 	b.w	8002fc8 <HAL_RCC_OscConfig+0x106c>
 80021f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021fa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800220a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d102      	bne.n	8002228 <HAL_RCC_OscConfig+0x2cc>
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_RCC_OscConfig+0x330>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	e015      	b.n	8002254 <HAL_RCC_OscConfig+0x2f8>
 8002228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800222c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800223c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002240:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002244:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_RCC_OscConfig+0x330>)
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002258:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800225c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002260:	fa92 f2a2 	rbit	r2, r2
 8002264:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002268:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800226c:	fab2 f282 	clz	r2, r2
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f042 0220 	orr.w	r2, r2, #32
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f002 021f 	and.w	r2, r2, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ab      	bne.n	80021e0 <HAL_RCC_OscConfig+0x284>
 8002288:	e003      	b.n	8002292 <HAL_RCC_OscConfig+0x336>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 817d 	beq.w	80025a2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022a8:	4ba6      	ldr	r3, [pc, #664]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00b      	beq.n	80022cc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022b4:	4ba3      	ldr	r3, [pc, #652]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d172      	bne.n	80023a6 <HAL_RCC_OscConfig+0x44a>
 80022c0:	4ba0      	ldr	r3, [pc, #640]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d16c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x44a>
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80022de:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d102      	bne.n	80022fc <HAL_RCC_OscConfig+0x3a0>
 80022f6:	4b93      	ldr	r3, [pc, #588]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	e013      	b.n	8002324 <HAL_RCC_OscConfig+0x3c8>
 80022fc:	2302      	movs	r3, #2
 80022fe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800230e:	2302      	movs	r3, #2
 8002310:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002314:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002320:	4b88      	ldr	r3, [pc, #544]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	2202      	movs	r2, #2
 8002326:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800232a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800232e:	fa92 f2a2 	rbit	r2, r2
 8002332:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002336:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800233a:	fab2 f282 	clz	r2, r2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f042 0220 	orr.w	r2, r2, #32
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	f002 021f 	and.w	r2, r2, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f202 	lsl.w	r2, r1, r2
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCC_OscConfig+0x410>
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d002      	beq.n	800236c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	f000 be2e 	b.w	8002fc8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b75      	ldr	r3, [pc, #468]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	21f8      	movs	r1, #248	; 0xf8
 8002382:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800238a:	fa91 f1a1 	rbit	r1, r1
 800238e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002392:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002396:	fab1 f181 	clz	r1, r1
 800239a:	b2c9      	uxtb	r1, r1
 800239c:	408b      	lsls	r3, r1
 800239e:	4969      	ldr	r1, [pc, #420]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a4:	e0fd      	b.n	80025a2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 8088 	beq.w	80024c8 <HAL_RCC_OscConfig+0x56c>
 80023b8:	2301      	movs	r3, #1
 80023ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80023ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	461a      	mov	r2, r3
 80023e0:	2301      	movs	r3, #1
 80023e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7ff f86c 	bl	80014c0 <HAL_GetTick>
 80023e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff f867 	bl	80014c0 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d902      	bls.n	8002404 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	f000 bde2 	b.w	8002fc8 <HAL_RCC_OscConfig+0x106c>
 8002404:	2302      	movs	r3, #2
 8002406:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002416:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_RCC_OscConfig+0x4d8>
 800242e:	4b45      	ldr	r3, [pc, #276]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	e013      	b.n	800245c <HAL_RCC_OscConfig+0x500>
 8002434:	2302      	movs	r3, #2
 8002436:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800244c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002458:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2202      	movs	r2, #2
 800245e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002462:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002466:	fa92 f2a2 	rbit	r2, r2
 800246a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800246e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002472:	fab2 f282 	clz	r2, r2
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f042 0220 	orr.w	r2, r2, #32
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f002 021f 	and.w	r2, r2, #31
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0af      	beq.n	80023ee <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	21f8      	movs	r1, #248	; 0xf8
 80024a4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024ac:	fa91 f1a1 	rbit	r1, r1
 80024b0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80024b4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80024b8:	fab1 f181 	clz	r1, r1
 80024bc:	b2c9      	uxtb	r1, r1
 80024be:	408b      	lsls	r3, r1
 80024c0:	4920      	ldr	r1, [pc, #128]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
 80024c6:	e06c      	b.n	80025a2 <HAL_RCC_OscConfig+0x646>
 80024c8:	2301      	movs	r3, #1
 80024ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80024da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	461a      	mov	r2, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe ffe4 	bl	80014c0 <HAL_GetTick>
 80024f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fe:	f7fe ffdf 	bl	80014c0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d902      	bls.n	8002514 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	f000 bd5a 	b.w	8002fc8 <HAL_RCC_OscConfig+0x106c>
 8002514:	2302      	movs	r3, #2
 8002516:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d104      	bne.n	8002548 <HAL_RCC_OscConfig+0x5ec>
 800253e:	4b01      	ldr	r3, [pc, #4]	; (8002544 <HAL_RCC_OscConfig+0x5e8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	e015      	b.n	8002570 <HAL_RCC_OscConfig+0x614>
 8002544:	40021000 	.word	0x40021000
 8002548:	2302      	movs	r3, #2
 800254a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800255a:	2302      	movs	r3, #2
 800255c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002560:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800256c:	4bc8      	ldr	r3, [pc, #800]	; (8002890 <HAL_RCC_OscConfig+0x934>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	2202      	movs	r2, #2
 8002572:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002576:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002582:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f042 0220 	orr.w	r2, r2, #32
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ad      	bne.n	80024fe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8110 	beq.w	80027d8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d079      	beq.n	80026bc <HAL_RCC_OscConfig+0x760>
 80025c8:	2301      	movs	r3, #1
 80025ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80025da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	4bab      	ldr	r3, [pc, #684]	; (8002894 <HAL_RCC_OscConfig+0x938>)
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	461a      	mov	r2, r3
 80025ee:	2301      	movs	r3, #1
 80025f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f2:	f7fe ff65 	bl	80014c0 <HAL_GetTick>
 80025f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fc:	f7fe ff60 	bl	80014c0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d902      	bls.n	8002612 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	f000 bcdb 	b.w	8002fc8 <HAL_RCC_OscConfig+0x106c>
 8002612:	2302      	movs	r3, #2
 8002614:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002628:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800262c:	2202      	movs	r2, #2
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002634:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	fa93 f2a3 	rbit	r2, r3
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002650:	2202      	movs	r2, #2
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	fa93 f2a3 	rbit	r2, r3
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800266a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266c:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_OscConfig+0x934>)
 800266e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002674:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002678:	2102      	movs	r1, #2
 800267a:	6019      	str	r1, [r3, #0]
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f1a3 	rbit	r1, r3
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002692:	6019      	str	r1, [r3, #0]
  return result;
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0a0      	beq.n	80025fc <HAL_RCC_OscConfig+0x6a0>
 80026ba:	e08d      	b.n	80027d8 <HAL_RCC_OscConfig+0x87c>
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026de:	601a      	str	r2, [r3, #0]
  return result;
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026e8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b68      	ldr	r3, [pc, #416]	; (8002894 <HAL_RCC_OscConfig+0x938>)
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	461a      	mov	r2, r3
 80026fa:	2300      	movs	r3, #0
 80026fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe fedf 	bl	80014c0 <HAL_GetTick>
 8002702:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002708:	f7fe feda 	bl	80014c0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d902      	bls.n	800271e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	f000 bc55 	b.w	8002fc8 <HAL_RCC_OscConfig+0x106c>
 800271e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002722:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002726:	2202      	movs	r2, #2
 8002728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	fa93 f2a3 	rbit	r2, r3
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800274a:	2202      	movs	r2, #2
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	fa93 f2a3 	rbit	r2, r3
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800276e:	2202      	movs	r2, #2
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	fa93 f2a3 	rbit	r2, r3
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002788:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278a:	4b41      	ldr	r3, [pc, #260]	; (8002890 <HAL_RCC_OscConfig+0x934>)
 800278c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002796:	2102      	movs	r1, #2
 8002798:	6019      	str	r1, [r3, #0]
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	fa93 f1a3 	rbit	r1, r3
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027b0:	6019      	str	r1, [r3, #0]
  return result;
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d197      	bne.n	8002708 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 81a1 	beq.w	8002b30 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_RCC_OscConfig+0x934>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d116      	bne.n	800282e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	4b23      	ldr	r3, [pc, #140]	; (8002890 <HAL_RCC_OscConfig+0x934>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	4a22      	ldr	r2, [pc, #136]	; (8002890 <HAL_RCC_OscConfig+0x934>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	61d3      	str	r3, [r2, #28]
 800280c:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_OscConfig+0x934>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002826:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_RCC_OscConfig+0x93c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d11a      	bne.n	8002870 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_RCC_OscConfig+0x93c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_RCC_OscConfig+0x93c>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002846:	f7fe fe3b 	bl	80014c0 <HAL_GetTick>
 800284a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	e009      	b.n	8002864 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002850:	f7fe fe36 	bl	80014c0 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b64      	cmp	r3, #100	; 0x64
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e3b1      	b.n	8002fc8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_RCC_OscConfig+0x93c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ef      	beq.n	8002850 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d10d      	bne.n	800289c <HAL_RCC_OscConfig+0x940>
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_RCC_OscConfig+0x934>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4a02      	ldr	r2, [pc, #8]	; (8002890 <HAL_RCC_OscConfig+0x934>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6213      	str	r3, [r2, #32]
 800288c:	e03c      	b.n	8002908 <HAL_RCC_OscConfig+0x9ac>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	10908120 	.word	0x10908120
 8002898:	40007000 	.word	0x40007000
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10c      	bne.n	80028c6 <HAL_RCC_OscConfig+0x96a>
 80028ac:	4bc1      	ldr	r3, [pc, #772]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4ac0      	ldr	r2, [pc, #768]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6213      	str	r3, [r2, #32]
 80028b8:	4bbe      	ldr	r3, [pc, #760]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4abd      	ldr	r2, [pc, #756]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6213      	str	r3, [r2, #32]
 80028c4:	e020      	b.n	8002908 <HAL_RCC_OscConfig+0x9ac>
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x994>
 80028d6:	4bb7      	ldr	r3, [pc, #732]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4ab6      	ldr	r2, [pc, #728]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	6213      	str	r3, [r2, #32]
 80028e2:	4bb4      	ldr	r3, [pc, #720]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4ab3      	ldr	r2, [pc, #716]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6213      	str	r3, [r2, #32]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0x9ac>
 80028f0:	4bb0      	ldr	r3, [pc, #704]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4aaf      	ldr	r2, [pc, #700]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	4bad      	ldr	r3, [pc, #692]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4aac      	ldr	r2, [pc, #688]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 8002902:	f023 0304 	bic.w	r3, r3, #4
 8002906:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8081 	beq.w	8002a1c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291a:	f7fe fdd1 	bl	80014c0 <HAL_GetTick>
 800291e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe fdcc 	bl	80014c0 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e345      	b.n	8002fc8 <HAL_RCC_OscConfig+0x106c>
 800293c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002940:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002944:	2202      	movs	r2, #2
 8002946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	fa93 f2a3 	rbit	r2, r3
 8002956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002968:	2202      	movs	r2, #2
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002982:	601a      	str	r2, [r3, #0]
  return result;
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800298c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_OscConfig+0xa4c>
 80029a2:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	e013      	b.n	80029d0 <HAL_RCC_OscConfig+0xa74>
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029b0:	2202      	movs	r2, #2
 80029b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	fa93 f2a3 	rbit	r2, r3
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	4b79      	ldr	r3, [pc, #484]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80029d8:	2102      	movs	r1, #2
 80029da:	6011      	str	r1, [r2, #0]
 80029dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	fa92 f1a2 	rbit	r1, r2
 80029ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029f2:	6011      	str	r1, [r2, #0]
  return result;
 80029f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	fab2 f282 	clz	r2, r2
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f002 021f 	and.w	r2, r2, #31
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f202 	lsl.w	r2, r1, r2
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d084      	beq.n	8002924 <HAL_RCC_OscConfig+0x9c8>
 8002a1a:	e07f      	b.n	8002b1c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fd50 	bl	80014c0 <HAL_GetTick>
 8002a20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	e00b      	b.n	8002a3e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe fd4b 	bl	80014c0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e2c4      	b.n	8002fc8 <HAL_RCC_OscConfig+0x106c>
 8002a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a42:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a46:	2202      	movs	r2, #2
 8002a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a72:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a80:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a84:	601a      	str	r2, [r3, #0]
  return result;
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d102      	bne.n	8002aaa <HAL_RCC_OscConfig+0xb4e>
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	e013      	b.n	8002ad2 <HAL_RCC_OscConfig+0xb76>
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	fa93 f2a3 	rbit	r2, r3
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ad6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ada:	2102      	movs	r1, #2
 8002adc:	6011      	str	r1, [r2, #0]
 8002ade:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ae2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	fa92 f1a2 	rbit	r1, r2
 8002aec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002af0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002af4:	6011      	str	r1, [r2, #0]
  return result;
 8002af6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002afa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f002 021f 	and.w	r2, r2, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f202 	lsl.w	r2, r1, r2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d184      	bne.n	8002a26 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b1c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 8002b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8242 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b42:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <HAL_RCC_OscConfig+0xc58>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	f000 8213 	beq.w	8002f76 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	f040 8162 	bne.w	8002e26 <HAL_RCC_OscConfig+0xeca>
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b74:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b86:	601a      	str	r2, [r3, #0]
  return result;
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b90:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fc8a 	bl	80014c0 <HAL_GetTick>
 8002bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb0:	e00c      	b.n	8002bcc <HAL_RCC_OscConfig+0xc70>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fc82 	bl	80014c0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e1fd      	b.n	8002fc8 <HAL_RCC_OscConfig+0x106c>
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	fa93 f2a3 	rbit	r2, r3
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bf0:	601a      	str	r2, [r3, #0]
  return result;
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d102      	bne.n	8002c16 <HAL_RCC_OscConfig+0xcba>
 8002c10:	4bb0      	ldr	r3, [pc, #704]	; (8002ed4 <HAL_RCC_OscConfig+0xf78>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	e027      	b.n	8002c66 <HAL_RCC_OscConfig+0xd0a>
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fa93 f2a3 	rbit	r2, r3
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f2a3 	rbit	r2, r3
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	4b9c      	ldr	r3, [pc, #624]	; (8002ed4 <HAL_RCC_OscConfig+0xf78>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c6a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c6e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c72:	6011      	str	r1, [r2, #0]
 8002c74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c78:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	fa92 f1a2 	rbit	r1, r2
 8002c82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c86:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c8a:	6011      	str	r1, [r2, #0]
  return result;
 8002c8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c90:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	fab2 f282 	clz	r2, r2
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	f042 0220 	orr.w	r2, r2, #32
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f002 021f 	and.w	r2, r2, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d182      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb2:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <HAL_RCC_OscConfig+0xf78>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	497f      	ldr	r1, [pc, #508]	; (8002ed4 <HAL_RCC_OscConfig+0xf78>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ce2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	fa93 f2a3 	rbit	r2, r3
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cfe:	601a      	str	r2, [r3, #0]
  return result;
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d08:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe fbce 	bl	80014c0 <HAL_GetTick>
 8002d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d28:	e009      	b.n	8002d3e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fe fbc9 	bl	80014c0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e144      	b.n	8002fc8 <HAL_RCC_OscConfig+0x106c>
 8002d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d42:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fa93 f2a3 	rbit	r2, r3
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d62:	601a      	str	r2, [r3, #0]
  return result;
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <HAL_RCC_OscConfig+0xe2c>
 8002d82:	4b54      	ldr	r3, [pc, #336]	; (8002ed4 <HAL_RCC_OscConfig+0xf78>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	e027      	b.n	8002dd8 <HAL_RCC_OscConfig+0xe7c>
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	fa93 f2a3 	rbit	r2, r3
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002db6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <HAL_RCC_OscConfig+0xf78>)
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ddc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002de0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002de4:	6011      	str	r1, [r2, #0]
 8002de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dea:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	fa92 f1a2 	rbit	r1, r2
 8002df4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002dfc:	6011      	str	r1, [r2, #0]
  return result;
 8002dfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e02:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	fab2 f282 	clz	r2, r2
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	f042 0220 	orr.w	r2, r2, #32
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	f002 021f 	and.w	r2, r2, #31
 8002e18:	2101      	movs	r1, #1
 8002e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d082      	beq.n	8002d2a <HAL_RCC_OscConfig+0xdce>
 8002e24:	e0cf      	b.n	8002fc6 <HAL_RCC_OscConfig+0x106a>
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	fa93 f2a3 	rbit	r2, r3
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e4a:	601a      	str	r2, [r3, #0]
  return result;
 8002e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e50:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e54:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	461a      	mov	r2, r3
 8002e68:	2300      	movs	r3, #0
 8002e6a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fb28 	bl	80014c0 <HAL_GetTick>
 8002e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	e009      	b.n	8002e8a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe fb23 	bl	80014c0 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e09e      	b.n	8002fc8 <HAL_RCC_OscConfig+0x106c>
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	fa93 f2a3 	rbit	r2, r3
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002eae:	601a      	str	r2, [r3, #0]
  return result;
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002eb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d104      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xf7c>
 8002ece:	4b01      	ldr	r3, [pc, #4]	; (8002ed4 <HAL_RCC_OscConfig+0xf78>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	e029      	b.n	8002f28 <HAL_RCC_OscConfig+0xfcc>
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fa93 f2a3 	rbit	r2, r3
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f10:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	fa93 f2a3 	rbit	r2, r3
 8002f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <HAL_RCC_OscConfig+0x1078>)
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f34:	6011      	str	r1, [r2, #0]
 8002f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f3a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	fa92 f1a2 	rbit	r1, r2
 8002f44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f48:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f4c:	6011      	str	r1, [r2, #0]
  return result;
 8002f4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f52:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	fab2 f282 	clz	r2, r2
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f042 0220 	orr.w	r2, r2, #32
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	f002 021f 	and.w	r2, r2, #31
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d180      	bne.n	8002e76 <HAL_RCC_OscConfig+0xf1a>
 8002f74:	e027      	b.n	8002fc6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e01e      	b.n	8002fc8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_RCC_OscConfig+0x1078>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f96:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002faa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b09e      	sub	sp, #120	; 0x78
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e162      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b90      	ldr	r3, [pc, #576]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d910      	bls.n	8003020 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b8d      	ldr	r3, [pc, #564]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 0207 	bic.w	r2, r3, #7
 8003006:	498b      	ldr	r1, [pc, #556]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b89      	ldr	r3, [pc, #548]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e14a      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b82      	ldr	r3, [pc, #520]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	497f      	ldr	r1, [pc, #508]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80dc 	beq.w	8003204 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d13c      	bne.n	80030ce <HAL_RCC_ClockConfig+0xf6>
 8003054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003058:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d102      	bne.n	800307e <HAL_RCC_ClockConfig+0xa6>
 8003078:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	e00f      	b.n	800309e <HAL_RCC_ClockConfig+0xc6>
 800307e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003082:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	667b      	str	r3, [r7, #100]	; 0x64
 800308c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003090:	663b      	str	r3, [r7, #96]	; 0x60
 8003092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800309a:	4b67      	ldr	r3, [pc, #412]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80030a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030a6:	fa92 f2a2 	rbit	r2, r2
 80030aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030ae:	fab2 f282 	clz	r2, r2
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f042 0220 	orr.w	r2, r2, #32
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	f002 021f 	and.w	r2, r2, #31
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d17b      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0f3      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d13c      	bne.n	8003150 <HAL_RCC_ClockConfig+0x178>
 80030d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_ClockConfig+0x128>
 80030fa:	4b4f      	ldr	r3, [pc, #316]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	e00f      	b.n	8003120 <HAL_RCC_ClockConfig+0x148>
 8003100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003104:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	647b      	str	r3, [r7, #68]	; 0x44
 800310e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003112:	643b      	str	r3, [r7, #64]	; 0x40
 8003114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800311c:	4b46      	ldr	r3, [pc, #280]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003124:	63ba      	str	r2, [r7, #56]	; 0x38
 8003126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003128:	fa92 f2a2 	rbit	r2, r2
 800312c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800312e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003130:	fab2 f282 	clz	r2, r2
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f042 0220 	orr.w	r2, r2, #32
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	f002 021f 	and.w	r2, r2, #31
 8003140:	2101      	movs	r1, #1
 8003142:	fa01 f202 	lsl.w	r2, r1, r2
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d13a      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b2      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
 8003150:	2302      	movs	r3, #2
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_RCC_ClockConfig+0x1a0>
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e00d      	b.n	8003194 <HAL_RCC_ClockConfig+0x1bc>
 8003178:	2302      	movs	r3, #2
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
 8003184:	2302      	movs	r3, #2
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2202      	movs	r2, #2
 8003196:	61ba      	str	r2, [r7, #24]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	fa92 f2a2 	rbit	r2, r2
 800319e:	617a      	str	r2, [r7, #20]
  return result;
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	fab2 f282 	clz	r2, r2
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f042 0220 	orr.w	r2, r2, #32
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f002 021f 	and.w	r2, r2, #31
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f202 	lsl.w	r2, r1, r2
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e079      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	491a      	ldr	r1, [pc, #104]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d4:	f7fe f974 	bl	80014c0 <HAL_GetTick>
 80031d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7fe f970 	bl	80014c0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e061      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d214      	bcs.n	800323c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 0207 	bic.w	r2, r3, #7
 800321a:	4906      	ldr	r1, [pc, #24]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e040      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
 8003234:	40022000 	.word	0x40022000
 8003238:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCC_ClockConfig+0x2e8>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	491a      	ldr	r1, [pc, #104]	; (80032c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003266:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4912      	ldr	r1, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800327a:	f000 f829 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800327e:	4601      	mov	r1, r0
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003288:	22f0      	movs	r2, #240	; 0xf0
 800328a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	fa92 f2a2 	rbit	r2, r2
 8003292:	60fa      	str	r2, [r7, #12]
  return result;
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	40d3      	lsrs	r3, r2
 800329e:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <HAL_RCC_ClockConfig+0x2ec>)
 80032a0:	5cd3      	ldrb	r3, [r2, r3]
 80032a2:	fa21 f303 	lsr.w	r3, r1, r3
 80032a6:	4a08      	ldr	r2, [pc, #32]	; (80032c8 <HAL_RCC_ClockConfig+0x2f0>)
 80032a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <HAL_RCC_ClockConfig+0x2f4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe f8c2 	bl	8001438 <HAL_InitTick>
  
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3778      	adds	r7, #120	; 0x78
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08006350 	.word	0x08006350
 80032c8:	20000080 	.word	0x20000080
 80032cc:	20000084 	.word	0x20000084

080032d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b08b      	sub	sp, #44	; 0x2c
 80032d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d002      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x30>
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d003      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x36>
 80032fe:	e03c      	b.n	800337a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003302:	623b      	str	r3, [r7, #32]
      break;
 8003304:	e03c      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800330c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003310:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	fa92 f2a2 	rbit	r2, r2
 8003318:	607a      	str	r2, [r7, #4]
  return result;
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	40d3      	lsrs	r3, r2
 8003324:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800332a:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_GetSysClockFreq+0xc0>)
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	220f      	movs	r2, #15
 8003334:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	fa92 f2a2 	rbit	r2, r2
 800333c:	60fa      	str	r2, [r7, #12]
  return result;
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	fab2 f282 	clz	r2, r2
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	40d3      	lsrs	r3, r2
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <HAL_RCC_GetSysClockFreq+0xcc>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003358:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <HAL_RCC_GetSysClockFreq+0xc4>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
 8003368:	e004      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	623b      	str	r3, [r7, #32]
      break;
 8003378:	e002      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_GetSysClockFreq+0xc4>)
 800337c:	623b      	str	r3, [r7, #32]
      break;
 800337e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003380:	6a3b      	ldr	r3, [r7, #32]
}
 8003382:	4618      	mov	r0, r3
 8003384:	372c      	adds	r7, #44	; 0x2c
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	007a1200 	.word	0x007a1200
 8003398:	08006368 	.word	0x08006368
 800339c:	08006378 	.word	0x08006378
 80033a0:	003d0900 	.word	0x003d0900

080033a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000080 	.word	0x20000080

080033bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033c2:	f7ff ffef 	bl	80033a4 <HAL_RCC_GetHCLKFreq>
 80033c6:	4601      	mov	r1, r0
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	fa92 f2a2 	rbit	r2, r2
 80033dc:	603a      	str	r2, [r7, #0]
  return result;
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	fab2 f282 	clz	r2, r2
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	40d3      	lsrs	r3, r2
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	08006360 	.word	0x08006360

08003400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003406:	f7ff ffcd 	bl	80033a4 <HAL_RCC_GetHCLKFreq>
 800340a:	4601      	mov	r1, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003414:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003418:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	fa92 f2a2 	rbit	r2, r2
 8003420:	603a      	str	r2, [r7, #0]
  return result;
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	fab2 f282 	clz	r2, r2
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	40d3      	lsrs	r3, r2
 800342c:	4a04      	ldr	r2, [pc, #16]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x40>)
 800342e:	5cd3      	ldrb	r3, [r2, r3]
 8003430:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000
 8003440:	08006360 	.word	0x08006360

08003444 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b092      	sub	sp, #72	; 0x48
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80d4 	beq.w	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003468:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10e      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003474:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4a4a      	ldr	r2, [pc, #296]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347e:	61d3      	str	r3, [r2, #28]
 8003480:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b45      	ldr	r3, [pc, #276]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349e:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a41      	ldr	r2, [pc, #260]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fe f809 	bl	80014c0 <HAL_GetTick>
 80034ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fe f805 	bl	80014c0 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b64      	cmp	r3, #100	; 0x64
 80034be:	d901      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e169      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d0:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8084 	beq.w	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d07c      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f0:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	461a      	mov	r2, r3
 800351a:	2301      	movs	r3, #1
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003522:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	461a      	mov	r2, r3
 800353e:	2300      	movs	r3, #0
 8003540:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003542:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003546:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d04b      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fd ffb5 	bl	80014c0 <HAL_GetTick>
 8003556:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fd ffb1 	bl	80014c0 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e113      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003570:	2302      	movs	r3, #2
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	2302      	movs	r3, #2
 800357e:	623b      	str	r3, [r7, #32]
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	61fb      	str	r3, [r7, #28]
  return result;
 8003588:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0302 	orr.w	r3, r3, #2
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d108      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800359e:	4b01      	ldr	r3, [pc, #4]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	e00d      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40007000 	.word	0x40007000
 80035ac:	10908100 	.word	0x10908100
 80035b0:	2302      	movs	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	4b78      	ldr	r3, [pc, #480]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	2202      	movs	r2, #2
 80035c2:	613a      	str	r2, [r7, #16]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	fa92 f2a2 	rbit	r2, r2
 80035ca:	60fa      	str	r2, [r7, #12]
  return result;
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	fab2 f282 	clz	r2, r2
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f002 021f 	and.w	r2, r2, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0b7      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035ea:	4b6d      	ldr	r3, [pc, #436]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	496a      	ldr	r1, [pc, #424]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003604:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4a65      	ldr	r2, [pc, #404]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800361c:	4b60      	ldr	r3, [pc, #384]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	f023 0203 	bic.w	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	495d      	ldr	r1, [pc, #372]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800363a:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4956      	ldr	r1, [pc, #344]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003648:	4313      	orrs	r3, r2
 800364a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003658:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	494e      	ldr	r1, [pc, #312]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003666:	4313      	orrs	r3, r2
 8003668:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003676:	4b4a      	ldr	r3, [pc, #296]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f023 0210 	bic.w	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	4947      	ldr	r1, [pc, #284]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003684:	4313      	orrs	r3, r2
 8003686:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003694:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	493f      	ldr	r1, [pc, #252]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036b2:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	f023 0220 	bic.w	r2, r3, #32
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4938      	ldr	r1, [pc, #224]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036d0:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4930      	ldr	r1, [pc, #192]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ee:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	4929      	ldr	r1, [pc, #164]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	4921      	ldr	r1, [pc, #132]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	491a      	ldr	r1, [pc, #104]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003738:	4313      	orrs	r3, r2
 800373a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003748:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	4912      	ldr	r1, [pc, #72]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003756:	4313      	orrs	r3, r2
 8003758:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	490b      	ldr	r1, [pc, #44]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003774:	4313      	orrs	r3, r2
 8003776:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003790:	4903      	ldr	r1, [pc, #12]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3748      	adds	r7, #72	; 0x48
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000

080037a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e09d      	b.n	80038f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d108      	bne.n	80037d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c6:	d009      	beq.n	80037dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	61da      	str	r2, [r3, #28]
 80037ce:	e005      	b.n	80037dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd fc36 	bl	8001068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003812:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800381c:	d902      	bls.n	8003824 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	e002      	b.n	800382a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003828:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003832:	d007      	beq.n	8003844 <HAL_SPI_Init+0xa0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800383c:	d002      	beq.n	8003844 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	ea42 0103 	orr.w	r1, r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	f003 0204 	and.w	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038c0:	ea42 0103 	orr.w	r1, r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e049      	b.n	80039a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fd fbe3 	bl	80010ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f000 faaf 	bl	8003e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d001      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e04a      	b.n	8003a56 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a21      	ldr	r2, [pc, #132]	; (8003a64 <HAL_TIM_Base_Start_IT+0xbc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d018      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ea:	d013      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <HAL_TIM_Base_Start_IT+0xc0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00e      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <HAL_TIM_Base_Start_IT+0xc4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d115      	bne.n	8003a40 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d015      	beq.n	8003a52 <HAL_TIM_Base_Start_IT+0xaa>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2c:	d011      	beq.n	8003a52 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3e:	e008      	b.n	8003a52 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	e000      	b.n	8003a54 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40013400 	.word	0x40013400
 8003a74:	40014000 	.word	0x40014000
 8003a78:	00010007 	.word	0x00010007

08003a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0202 	mvn.w	r2, #2
 8003aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f9ce 	bl	8003e60 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f9c0 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f9d1 	bl	8003e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9a4 	bl	8003e60 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f996 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f9a7 	bl	8003e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0208 	mvn.w	r2, #8
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f97a 	bl	8003e60 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f96c 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f97d 	bl	8003e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0210 	mvn.w	r2, #16
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f950 	bl	8003e60 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f942 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f953 	bl	8003e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0201 	mvn.w	r2, #1
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fc fe2e 	bl	800085c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 faec 	bl	8004204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3a:	d10e      	bne.n	8003c5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d107      	bne.n	8003c5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fadf 	bl	8004218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d10e      	bne.n	8003c86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d107      	bne.n	8003c86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f901 	bl	8003e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d10e      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d107      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f06f 0220 	mvn.w	r2, #32
 8003caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fa9f 	bl	80041f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_ConfigClockSource+0x1c>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e0b6      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x18a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cf8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d00:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d12:	d03e      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0xd8>
 8003d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d18:	f200 8087 	bhi.w	8003e2a <HAL_TIM_ConfigClockSource+0x170>
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d20:	f000 8086 	beq.w	8003e30 <HAL_TIM_ConfigClockSource+0x176>
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d28:	d87f      	bhi.n	8003e2a <HAL_TIM_ConfigClockSource+0x170>
 8003d2a:	2b70      	cmp	r3, #112	; 0x70
 8003d2c:	d01a      	beq.n	8003d64 <HAL_TIM_ConfigClockSource+0xaa>
 8003d2e:	2b70      	cmp	r3, #112	; 0x70
 8003d30:	d87b      	bhi.n	8003e2a <HAL_TIM_ConfigClockSource+0x170>
 8003d32:	2b60      	cmp	r3, #96	; 0x60
 8003d34:	d050      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0x11e>
 8003d36:	2b60      	cmp	r3, #96	; 0x60
 8003d38:	d877      	bhi.n	8003e2a <HAL_TIM_ConfigClockSource+0x170>
 8003d3a:	2b50      	cmp	r3, #80	; 0x50
 8003d3c:	d03c      	beq.n	8003db8 <HAL_TIM_ConfigClockSource+0xfe>
 8003d3e:	2b50      	cmp	r3, #80	; 0x50
 8003d40:	d873      	bhi.n	8003e2a <HAL_TIM_ConfigClockSource+0x170>
 8003d42:	2b40      	cmp	r3, #64	; 0x40
 8003d44:	d058      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0x13e>
 8003d46:	2b40      	cmp	r3, #64	; 0x40
 8003d48:	d86f      	bhi.n	8003e2a <HAL_TIM_ConfigClockSource+0x170>
 8003d4a:	2b30      	cmp	r3, #48	; 0x30
 8003d4c:	d064      	beq.n	8003e18 <HAL_TIM_ConfigClockSource+0x15e>
 8003d4e:	2b30      	cmp	r3, #48	; 0x30
 8003d50:	d86b      	bhi.n	8003e2a <HAL_TIM_ConfigClockSource+0x170>
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d060      	beq.n	8003e18 <HAL_TIM_ConfigClockSource+0x15e>
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d867      	bhi.n	8003e2a <HAL_TIM_ConfigClockSource+0x170>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d05c      	beq.n	8003e18 <HAL_TIM_ConfigClockSource+0x15e>
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d05a      	beq.n	8003e18 <HAL_TIM_ConfigClockSource+0x15e>
 8003d62:	e062      	b.n	8003e2a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	6899      	ldr	r1, [r3, #8]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f000 f99c 	bl	80040b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	609a      	str	r2, [r3, #8]
      break;
 8003d90:	e04f      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6899      	ldr	r1, [r3, #8]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f000 f985 	bl	80040b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db4:	609a      	str	r2, [r3, #8]
      break;
 8003db6:	e03c      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f000 f8f9 	bl	8003fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2150      	movs	r1, #80	; 0x50
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f952 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003dd6:	e02c      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	461a      	mov	r2, r3
 8003de6:	f000 f918 	bl	800401a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2160      	movs	r1, #96	; 0x60
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f942 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003df6:	e01c      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	461a      	mov	r2, r3
 8003e06:	f000 f8d9 	bl	8003fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2140      	movs	r1, #64	; 0x40
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f932 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003e16:	e00c      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f000 f929 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003e28:	e003      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2e:	e000      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <TIM_Base_SetConfig+0x104>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00f      	beq.n	8003ed4 <TIM_Base_SetConfig+0x38>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d00b      	beq.n	8003ed4 <TIM_Base_SetConfig+0x38>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a39      	ldr	r2, [pc, #228]	; (8003fa4 <TIM_Base_SetConfig+0x108>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_Base_SetConfig+0x38>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a38      	ldr	r2, [pc, #224]	; (8003fa8 <TIM_Base_SetConfig+0x10c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0x38>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a37      	ldr	r2, [pc, #220]	; (8003fac <TIM_Base_SetConfig+0x110>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	; (8003fa0 <TIM_Base_SetConfig+0x104>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01b      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d017      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <TIM_Base_SetConfig+0x108>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <TIM_Base_SetConfig+0x10c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00f      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a28      	ldr	r2, [pc, #160]	; (8003fac <TIM_Base_SetConfig+0x110>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a26      	ldr	r2, [pc, #152]	; (8003fb4 <TIM_Base_SetConfig+0x118>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_Base_SetConfig+0x8a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a25      	ldr	r2, [pc, #148]	; (8003fb8 <TIM_Base_SetConfig+0x11c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <TIM_Base_SetConfig+0x104>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00f      	beq.n	8003f84 <TIM_Base_SetConfig+0xe8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a11      	ldr	r2, [pc, #68]	; (8003fac <TIM_Base_SetConfig+0x110>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <TIM_Base_SetConfig+0xe8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <TIM_Base_SetConfig+0xe8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a0f      	ldr	r2, [pc, #60]	; (8003fb4 <TIM_Base_SetConfig+0x118>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_Base_SetConfig+0xe8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <TIM_Base_SetConfig+0x11c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d103      	bne.n	8003f8c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	615a      	str	r2, [r3, #20]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40013400 	.word	0x40013400
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40014400 	.word	0x40014400
 8003fb8:	40014800 	.word	0x40014800

08003fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f023 0201 	bic.w	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f023 030a 	bic.w	r3, r3, #10
 8003ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b087      	sub	sp, #28
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0210 	bic.w	r2, r3, #16
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	f043 0307 	orr.w	r3, r3, #7
 800409c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	021a      	lsls	r2, r3, #8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	609a      	str	r2, [r3, #8]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004104:	2302      	movs	r3, #2
 8004106:	e063      	b.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2b      	ldr	r2, [pc, #172]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2a      	ldr	r2, [pc, #168]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d108      	bne.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004142:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1b      	ldr	r2, [pc, #108]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d018      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417a:	d013      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00e      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a12      	ldr	r2, [pc, #72]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a13      	ldr	r2, [pc, #76]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10c      	bne.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40013400 	.word	0x40013400
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40014000 	.word	0x40014000

080041f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e040      	b.n	80042c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fc ff8c 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	; 0x24
 8004258:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fcb6 	bl	8004bdc <UART_SetConfig>
 8004270:	4603      	mov	r3, r0
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e022      	b.n	80042c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fe7e 	bl	8004f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 ff05 	bl	80050c8 <UART_CheckIdleState>
 80042be:	4603      	mov	r3, r0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d178      	bne.n	80043d2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_UART_Transmit+0x24>
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e071      	b.n	80043d4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2221      	movs	r2, #33	; 0x21
 80042fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042fe:	f7fd f8df 	bl	80014c0 <HAL_GetTick>
 8004302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431c:	d108      	bne.n	8004330 <HAL_UART_Transmit+0x68>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d104      	bne.n	8004330 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	e003      	b.n	8004338 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004334:	2300      	movs	r3, #0
 8004336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004338:	e030      	b.n	800439c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 ff67 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d004      	beq.n	800435a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e03c      	b.n	80043d4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	881a      	ldrh	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800436c:	b292      	uxth	r2, r2
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	3302      	adds	r3, #2
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e008      	b.n	800438a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b292      	uxth	r2, r2
 8004382:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	3301      	adds	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1c8      	bne.n	800433a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	2140      	movs	r1, #64	; 0x40
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 ff30 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e005      	b.n	80043d4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	f040 80a3 	bne.w	800453e <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_UART_Receive+0x28>
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e09b      	b.n	8004540 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2222      	movs	r2, #34	; 0x22
 8004414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800441e:	f7fd f84f 	bl	80014c0 <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443c:	d10e      	bne.n	800445c <HAL_UART_Receive+0x80>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <HAL_UART_Receive+0x76>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f240 12ff 	movw	r2, #511	; 0x1ff
 800444c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004450:	e01a      	b.n	8004488 <HAL_UART_Receive+0xac>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800445a:	e015      	b.n	8004488 <HAL_UART_Receive+0xac>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10d      	bne.n	8004480 <HAL_UART_Receive+0xa4>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_UART_Receive+0x9a>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004474:	e008      	b.n	8004488 <HAL_UART_Receive+0xac>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	227f      	movs	r2, #127	; 0x7f
 800447a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800447e:	e003      	b.n	8004488 <HAL_UART_Receive+0xac>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800448e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004498:	d108      	bne.n	80044ac <HAL_UART_Receive+0xd0>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d104      	bne.n	80044ac <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e003      	b.n	80044b4 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80044b4:	e037      	b.n	8004526 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	2120      	movs	r1, #32
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fea9 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e033      	b.n	8004540 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10c      	bne.n	80044f8 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	8a7b      	ldrh	r3, [r7, #18]
 80044e8:	4013      	ands	r3, r2
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	3302      	adds	r3, #2
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e00d      	b.n	8004514 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044fe:	b29b      	uxth	r3, r3
 8004500:	b2da      	uxtb	r2, r3
 8004502:	8a7b      	ldrh	r3, [r7, #18]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	4013      	ands	r3, r2
 8004508:	b2da      	uxtb	r2, r3
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1c1      	bne.n	80044b6 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e000      	b.n	8004540 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 800453e:	2302      	movs	r3, #2
  }
}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800455c:	2b20      	cmp	r3, #32
 800455e:	d132      	bne.n	80045c6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_Receive_IT+0x24>
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e02b      	b.n	80045c8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d018      	beq.n	80045b6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	613b      	str	r3, [r7, #16]
   return(result);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	623b      	str	r3, [r7, #32]
 80045a4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	69f9      	ldr	r1, [r7, #28]
 80045a8:	6a3a      	ldr	r2, [r7, #32]
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e6      	bne.n	8004584 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	461a      	mov	r2, r3
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fe93 	bl	80052e8 <UART_Start_Receive_IT>
 80045c2:	4603      	mov	r3, r0
 80045c4:	e000      	b.n	80045c8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80045c6:	2302      	movs	r3, #2
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3728      	adds	r7, #40	; 0x28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b0ba      	sub	sp, #232	; 0xe8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80045fe:	4013      	ands	r3, r2
 8004600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d115      	bne.n	8004638 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800460c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00f      	beq.n	8004638 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 82ab 	beq.w	8004b84 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
      }
      return;
 8004636:	e2a5      	b.n	8004b84 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8117 	beq.w	8004870 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800464e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004652:	4b85      	ldr	r3, [pc, #532]	; (8004868 <HAL_UART_IRQHandler+0x298>)
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 810a 	beq.w	8004870 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800465c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d011      	beq.n	800468c <HAL_UART_IRQHandler+0xbc>
 8004668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00b      	beq.n	800468c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2201      	movs	r2, #1
 800467a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004682:	f043 0201 	orr.w	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d011      	beq.n	80046bc <HAL_UART_IRQHandler+0xec>
 8004698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2202      	movs	r2, #2
 80046aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b2:	f043 0204 	orr.w	r2, r3, #4
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d011      	beq.n	80046ec <HAL_UART_IRQHandler+0x11c>
 80046c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00b      	beq.n	80046ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2204      	movs	r2, #4
 80046da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e2:	f043 0202 	orr.w	r2, r3, #2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d017      	beq.n	8004728 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004708:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00b      	beq.n	8004728 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2208      	movs	r2, #8
 8004716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471e:	f043 0208 	orr.w	r2, r3, #8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004730:	2b00      	cmp	r3, #0
 8004732:	d012      	beq.n	800475a <HAL_UART_IRQHandler+0x18a>
 8004734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004738:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00c      	beq.n	800475a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004750:	f043 0220 	orr.w	r2, r3, #32
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8211 	beq.w	8004b88 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004794:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	d005      	beq.n	80047b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d04f      	beq.n	8004852 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fe4c 	bl	8005450 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d141      	bne.n	800484a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3308      	adds	r3, #8
 80047cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800480a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1d9      	bne.n	80047c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004816:	2b00      	cmp	r3, #0
 8004818:	d013      	beq.n	8004842 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481e:	4a13      	ldr	r2, [pc, #76]	; (800486c <HAL_UART_IRQHandler+0x29c>)
 8004820:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004826:	4618      	mov	r0, r3
 8004828:	f7fc ffa0 	bl	800176c <HAL_DMA_Abort_IT>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d017      	beq.n	8004862 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800483c:	4610      	mov	r0, r2
 800483e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e00f      	b.n	8004862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f9b4 	bl	8004bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	e00b      	b.n	8004862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f9b0 	bl	8004bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	e007      	b.n	8004862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f9ac 	bl	8004bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004860:	e192      	b.n	8004b88 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004862:	bf00      	nop
    return;
 8004864:	e190      	b.n	8004b88 <HAL_UART_IRQHandler+0x5b8>
 8004866:	bf00      	nop
 8004868:	04000120 	.word	0x04000120
 800486c:	08005519 	.word	0x08005519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004874:	2b01      	cmp	r3, #1
 8004876:	f040 814b 	bne.w	8004b10 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8144 	beq.w	8004b10 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 813d 	beq.w	8004b10 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2210      	movs	r2, #16
 800489c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a8:	2b40      	cmp	r3, #64	; 0x40
 80048aa:	f040 80b5 	bne.w	8004a18 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8164 	beq.w	8004b8c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ce:	429a      	cmp	r2, r3
 80048d0:	f080 815c 	bcs.w	8004b8c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	f000 8086 	beq.w	80049f6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004914:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004918:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004920:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800492c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1da      	bne.n	80048ea <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3308      	adds	r3, #8
 8004954:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004958:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800495c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004960:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800496a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e1      	bne.n	8004934 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004994:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004996:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800499a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e3      	bne.n	8004970 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c6:	f023 0310 	bic.w	r3, r3, #16
 80049ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80049da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e4      	bne.n	80049b6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fc fe82 	bl	80016fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f8d7 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a16:	e0b9      	b.n	8004b8c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80ab 	beq.w	8004b90 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004a3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 80a6 	beq.w	8004b90 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a66:	647b      	str	r3, [r7, #68]	; 0x44
 8004a68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e4      	bne.n	8004a44 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	623b      	str	r3, [r7, #32]
   return(result);
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e3      	bne.n	8004a7a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0310 	bic.w	r3, r3, #16
 8004ada:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	69b9      	ldr	r1, [r7, #24]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	617b      	str	r3, [r7, #20]
   return(result);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e4      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f85b 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b0e:	e03f      	b.n	8004b90 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00e      	beq.n	8004b3a <HAL_UART_IRQHandler+0x56a>
 8004b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fed8 	bl	80058e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b38:	e02d      	b.n	8004b96 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00e      	beq.n	8004b64 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d008      	beq.n	8004b64 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01c      	beq.n	8004b94 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
    }
    return;
 8004b62:	e017      	b.n	8004b94 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d012      	beq.n	8004b96 <HAL_UART_IRQHandler+0x5c6>
 8004b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00c      	beq.n	8004b96 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fce1 	bl	8005544 <UART_EndTransmit_IT>
    return;
 8004b82:	e008      	b.n	8004b96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004b84:	bf00      	nop
 8004b86:	e006      	b.n	8004b96 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004b88:	bf00      	nop
 8004b8a:	e004      	b.n	8004b96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004b8c:	bf00      	nop
 8004b8e:	e002      	b.n	8004b96 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004b90:	bf00      	nop
 8004b92:	e000      	b.n	8004b96 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004b94:	bf00      	nop
  }

}
 8004b96:	37e8      	adds	r7, #232	; 0xe8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c0a:	f023 030c 	bic.w	r3, r3, #12
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	6979      	ldr	r1, [r7, #20]
 8004c14:	430b      	orrs	r3, r1
 8004c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4aa7      	ldr	r2, [pc, #668]	; (8004ef4 <UART_SetConfig+0x318>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d120      	bne.n	8004c9e <UART_SetConfig+0xc2>
 8004c5c:	4ba6      	ldr	r3, [pc, #664]	; (8004ef8 <UART_SetConfig+0x31c>)
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d817      	bhi.n	8004c98 <UART_SetConfig+0xbc>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <UART_SetConfig+0x94>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004c8d 	.word	0x08004c8d
 8004c78:	08004c93 	.word	0x08004c93
 8004c7c:	08004c87 	.word	0x08004c87
 8004c80:	2301      	movs	r3, #1
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e0b5      	b.n	8004df2 <UART_SetConfig+0x216>
 8004c86:	2302      	movs	r3, #2
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e0b2      	b.n	8004df2 <UART_SetConfig+0x216>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e0af      	b.n	8004df2 <UART_SetConfig+0x216>
 8004c92:	2308      	movs	r3, #8
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e0ac      	b.n	8004df2 <UART_SetConfig+0x216>
 8004c98:	2310      	movs	r3, #16
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e0a9      	b.n	8004df2 <UART_SetConfig+0x216>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a96      	ldr	r2, [pc, #600]	; (8004efc <UART_SetConfig+0x320>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d124      	bne.n	8004cf2 <UART_SetConfig+0x116>
 8004ca8:	4b93      	ldr	r3, [pc, #588]	; (8004ef8 <UART_SetConfig+0x31c>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cb4:	d011      	beq.n	8004cda <UART_SetConfig+0xfe>
 8004cb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cba:	d817      	bhi.n	8004cec <UART_SetConfig+0x110>
 8004cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc0:	d011      	beq.n	8004ce6 <UART_SetConfig+0x10a>
 8004cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc6:	d811      	bhi.n	8004cec <UART_SetConfig+0x110>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <UART_SetConfig+0xf8>
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd0:	d006      	beq.n	8004ce0 <UART_SetConfig+0x104>
 8004cd2:	e00b      	b.n	8004cec <UART_SetConfig+0x110>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e08b      	b.n	8004df2 <UART_SetConfig+0x216>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e088      	b.n	8004df2 <UART_SetConfig+0x216>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e085      	b.n	8004df2 <UART_SetConfig+0x216>
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e082      	b.n	8004df2 <UART_SetConfig+0x216>
 8004cec:	2310      	movs	r3, #16
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e07f      	b.n	8004df2 <UART_SetConfig+0x216>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a82      	ldr	r2, [pc, #520]	; (8004f00 <UART_SetConfig+0x324>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d124      	bne.n	8004d46 <UART_SetConfig+0x16a>
 8004cfc:	4b7e      	ldr	r3, [pc, #504]	; (8004ef8 <UART_SetConfig+0x31c>)
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004d04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d08:	d011      	beq.n	8004d2e <UART_SetConfig+0x152>
 8004d0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d0e:	d817      	bhi.n	8004d40 <UART_SetConfig+0x164>
 8004d10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d14:	d011      	beq.n	8004d3a <UART_SetConfig+0x15e>
 8004d16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d1a:	d811      	bhi.n	8004d40 <UART_SetConfig+0x164>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <UART_SetConfig+0x14c>
 8004d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d24:	d006      	beq.n	8004d34 <UART_SetConfig+0x158>
 8004d26:	e00b      	b.n	8004d40 <UART_SetConfig+0x164>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e061      	b.n	8004df2 <UART_SetConfig+0x216>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e05e      	b.n	8004df2 <UART_SetConfig+0x216>
 8004d34:	2304      	movs	r3, #4
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e05b      	b.n	8004df2 <UART_SetConfig+0x216>
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e058      	b.n	8004df2 <UART_SetConfig+0x216>
 8004d40:	2310      	movs	r3, #16
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e055      	b.n	8004df2 <UART_SetConfig+0x216>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a6e      	ldr	r2, [pc, #440]	; (8004f04 <UART_SetConfig+0x328>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d124      	bne.n	8004d9a <UART_SetConfig+0x1be>
 8004d50:	4b69      	ldr	r3, [pc, #420]	; (8004ef8 <UART_SetConfig+0x31c>)
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d5c:	d011      	beq.n	8004d82 <UART_SetConfig+0x1a6>
 8004d5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d62:	d817      	bhi.n	8004d94 <UART_SetConfig+0x1b8>
 8004d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d68:	d011      	beq.n	8004d8e <UART_SetConfig+0x1b2>
 8004d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d6e:	d811      	bhi.n	8004d94 <UART_SetConfig+0x1b8>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <UART_SetConfig+0x1a0>
 8004d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d78:	d006      	beq.n	8004d88 <UART_SetConfig+0x1ac>
 8004d7a:	e00b      	b.n	8004d94 <UART_SetConfig+0x1b8>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e037      	b.n	8004df2 <UART_SetConfig+0x216>
 8004d82:	2302      	movs	r3, #2
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e034      	b.n	8004df2 <UART_SetConfig+0x216>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e031      	b.n	8004df2 <UART_SetConfig+0x216>
 8004d8e:	2308      	movs	r3, #8
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e02e      	b.n	8004df2 <UART_SetConfig+0x216>
 8004d94:	2310      	movs	r3, #16
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e02b      	b.n	8004df2 <UART_SetConfig+0x216>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a5a      	ldr	r2, [pc, #360]	; (8004f08 <UART_SetConfig+0x32c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d124      	bne.n	8004dee <UART_SetConfig+0x212>
 8004da4:	4b54      	ldr	r3, [pc, #336]	; (8004ef8 <UART_SetConfig+0x31c>)
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004dac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004db0:	d011      	beq.n	8004dd6 <UART_SetConfig+0x1fa>
 8004db2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004db6:	d817      	bhi.n	8004de8 <UART_SetConfig+0x20c>
 8004db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dbc:	d011      	beq.n	8004de2 <UART_SetConfig+0x206>
 8004dbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dc2:	d811      	bhi.n	8004de8 <UART_SetConfig+0x20c>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <UART_SetConfig+0x1f4>
 8004dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dcc:	d006      	beq.n	8004ddc <UART_SetConfig+0x200>
 8004dce:	e00b      	b.n	8004de8 <UART_SetConfig+0x20c>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e00d      	b.n	8004df2 <UART_SetConfig+0x216>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e00a      	b.n	8004df2 <UART_SetConfig+0x216>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e007      	b.n	8004df2 <UART_SetConfig+0x216>
 8004de2:	2308      	movs	r3, #8
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e004      	b.n	8004df2 <UART_SetConfig+0x216>
 8004de8:	2310      	movs	r3, #16
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e001      	b.n	8004df2 <UART_SetConfig+0x216>
 8004dee:	2310      	movs	r3, #16
 8004df0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfa:	d15b      	bne.n	8004eb4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004dfc:	7ffb      	ldrb	r3, [r7, #31]
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d827      	bhi.n	8004e52 <UART_SetConfig+0x276>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <UART_SetConfig+0x22c>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e3d 	.word	0x08004e3d
 8004e14:	08004e53 	.word	0x08004e53
 8004e18:	08004e43 	.word	0x08004e43
 8004e1c:	08004e53 	.word	0x08004e53
 8004e20:	08004e53 	.word	0x08004e53
 8004e24:	08004e53 	.word	0x08004e53
 8004e28:	08004e4b 	.word	0x08004e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fe fac6 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8004e30:	61b8      	str	r0, [r7, #24]
        break;
 8004e32:	e013      	b.n	8004e5c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e34:	f7fe fae4 	bl	8003400 <HAL_RCC_GetPCLK2Freq>
 8004e38:	61b8      	str	r0, [r7, #24]
        break;
 8004e3a:	e00f      	b.n	8004e5c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e3c:	4b33      	ldr	r3, [pc, #204]	; (8004f0c <UART_SetConfig+0x330>)
 8004e3e:	61bb      	str	r3, [r7, #24]
        break;
 8004e40:	e00c      	b.n	8004e5c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e42:	f7fe fa45 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8004e46:	61b8      	str	r0, [r7, #24]
        break;
 8004e48:	e008      	b.n	8004e5c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4e:	61bb      	str	r3, [r7, #24]
        break;
 8004e50:	e004      	b.n	8004e5c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	77bb      	strb	r3, [r7, #30]
        break;
 8004e5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8082 	beq.w	8004f68 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	005a      	lsls	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	441a      	add	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b0f      	cmp	r3, #15
 8004e7e:	d916      	bls.n	8004eae <UART_SetConfig+0x2d2>
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e86:	d212      	bcs.n	8004eae <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f023 030f 	bic.w	r3, r3, #15
 8004e90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	085b      	lsrs	r3, r3, #1
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	89fb      	ldrh	r3, [r7, #14]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	89fa      	ldrh	r2, [r7, #14]
 8004eaa:	60da      	str	r2, [r3, #12]
 8004eac:	e05c      	b.n	8004f68 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	77bb      	strb	r3, [r7, #30]
 8004eb2:	e059      	b.n	8004f68 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb4:	7ffb      	ldrb	r3, [r7, #31]
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d835      	bhi.n	8004f26 <UART_SetConfig+0x34a>
 8004eba:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0x2e4>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004ee5 	.word	0x08004ee5
 8004ec4:	08004eed 	.word	0x08004eed
 8004ec8:	08004f11 	.word	0x08004f11
 8004ecc:	08004f27 	.word	0x08004f27
 8004ed0:	08004f17 	.word	0x08004f17
 8004ed4:	08004f27 	.word	0x08004f27
 8004ed8:	08004f27 	.word	0x08004f27
 8004edc:	08004f27 	.word	0x08004f27
 8004ee0:	08004f1f 	.word	0x08004f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee4:	f7fe fa6a 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8004ee8:	61b8      	str	r0, [r7, #24]
        break;
 8004eea:	e021      	b.n	8004f30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eec:	f7fe fa88 	bl	8003400 <HAL_RCC_GetPCLK2Freq>
 8004ef0:	61b8      	str	r0, [r7, #24]
        break;
 8004ef2:	e01d      	b.n	8004f30 <UART_SetConfig+0x354>
 8004ef4:	40013800 	.word	0x40013800
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40004400 	.word	0x40004400
 8004f00:	40004800 	.word	0x40004800
 8004f04:	40004c00 	.word	0x40004c00
 8004f08:	40005000 	.word	0x40005000
 8004f0c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <UART_SetConfig+0x3a4>)
 8004f12:	61bb      	str	r3, [r7, #24]
        break;
 8004f14:	e00c      	b.n	8004f30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7fe f9db 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8004f1a:	61b8      	str	r0, [r7, #24]
        break;
 8004f1c:	e008      	b.n	8004f30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f22:	61bb      	str	r3, [r7, #24]
        break;
 8004f24:	e004      	b.n	8004f30 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d018      	beq.n	8004f68 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	085a      	lsrs	r2, r3, #1
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	441a      	add	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b0f      	cmp	r3, #15
 8004f4e:	d909      	bls.n	8004f64 <UART_SetConfig+0x388>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f56:	d205      	bcs.n	8004f64 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	e001      	b.n	8004f68 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f74:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	007a1200 	.word	0x007a1200

08004f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01a      	beq.n	800509a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005082:	d10a      	bne.n	800509a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b098      	sub	sp, #96	; 0x60
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050d8:	f7fc f9f2 	bl	80014c0 <HAL_GetTick>
 80050dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d12e      	bne.n	800514a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050f4:	2200      	movs	r2, #0
 80050f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f88c 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d021      	beq.n	800514a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800511a:	653b      	str	r3, [r7, #80]	; 0x50
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005124:	647b      	str	r3, [r7, #68]	; 0x44
 8005126:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800512a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e6      	bne.n	8005106 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e062      	b.n	8005210 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b04      	cmp	r3, #4
 8005156:	d149      	bne.n	80051ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005160:	2200      	movs	r2, #0
 8005162:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f856 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d03c      	beq.n	80051ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	623b      	str	r3, [r7, #32]
   return(result);
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005190:	633b      	str	r3, [r7, #48]	; 0x30
 8005192:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e6      	bne.n	8005172 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3308      	adds	r3, #8
 80051c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051c4:	61fa      	str	r2, [r7, #28]
 80051c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	69b9      	ldr	r1, [r7, #24]
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	617b      	str	r3, [r7, #20]
   return(result);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e5      	bne.n	80051a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e011      	b.n	8005210 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3758      	adds	r7, #88	; 0x58
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005228:	e049      	b.n	80052be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d045      	beq.n	80052be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005232:	f7fc f945 	bl	80014c0 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	429a      	cmp	r2, r3
 8005240:	d302      	bcc.n	8005248 <UART_WaitOnFlagUntilTimeout+0x30>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e048      	b.n	80052de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d031      	beq.n	80052be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b08      	cmp	r3, #8
 8005266:	d110      	bne.n	800528a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2208      	movs	r2, #8
 800526e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f8ed 	bl	8005450 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2208      	movs	r2, #8
 800527a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e029      	b.n	80052de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005298:	d111      	bne.n	80052be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f8d3 	bl	8005450 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e00f      	b.n	80052de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4013      	ands	r3, r2
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	bf0c      	ite	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	2300      	movne	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d0a6      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b097      	sub	sp, #92	; 0x5c
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	88fa      	ldrh	r2, [r7, #6]
 8005300:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531a:	d10e      	bne.n	800533a <UART_Start_Receive_IT+0x52>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d105      	bne.n	8005330 <UART_Start_Receive_IT+0x48>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f240 12ff 	movw	r2, #511	; 0x1ff
 800532a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800532e:	e01a      	b.n	8005366 <UART_Start_Receive_IT+0x7e>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	22ff      	movs	r2, #255	; 0xff
 8005334:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005338:	e015      	b.n	8005366 <UART_Start_Receive_IT+0x7e>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10d      	bne.n	800535e <UART_Start_Receive_IT+0x76>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <UART_Start_Receive_IT+0x6c>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	22ff      	movs	r2, #255	; 0xff
 800534e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005352:	e008      	b.n	8005366 <UART_Start_Receive_IT+0x7e>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	227f      	movs	r2, #127	; 0x7f
 8005358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800535c:	e003      	b.n	8005366 <UART_Start_Receive_IT+0x7e>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2222      	movs	r2, #34	; 0x22
 8005372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	657b      	str	r3, [r7, #84]	; 0x54
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005396:	64ba      	str	r2, [r7, #72]	; 0x48
 8005398:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800539c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e5      	bne.n	8005376 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	d107      	bne.n	80053c4 <UART_Start_Receive_IT+0xdc>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d103      	bne.n	80053c4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4a22      	ldr	r2, [pc, #136]	; (8005448 <UART_Start_Receive_IT+0x160>)
 80053c0:	669a      	str	r2, [r3, #104]	; 0x68
 80053c2:	e002      	b.n	80053ca <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4a21      	ldr	r2, [pc, #132]	; (800544c <UART_Start_Receive_IT+0x164>)
 80053c8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d019      	beq.n	8005406 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80053e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e6      	bne.n	80053d2 <UART_Start_Receive_IT+0xea>
 8005404:	e018      	b.n	8005438 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	613b      	str	r3, [r7, #16]
   return(result);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f043 0320 	orr.w	r3, r3, #32
 800541a:	653b      	str	r3, [r7, #80]	; 0x50
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005424:	623b      	str	r3, [r7, #32]
 8005426:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	69f9      	ldr	r1, [r7, #28]
 800542a:	6a3a      	ldr	r2, [r7, #32]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	61bb      	str	r3, [r7, #24]
   return(result);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	375c      	adds	r7, #92	; 0x5c
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	08005741 	.word	0x08005741
 800544c:	08005599 	.word	0x08005599

08005450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b095      	sub	sp, #84	; 0x54
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800546c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005476:	643b      	str	r3, [r7, #64]	; 0x40
 8005478:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800547c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e6      	bne.n	8005458 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3308      	adds	r3, #8
 8005490:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	61fb      	str	r3, [r7, #28]
   return(result);
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3308      	adds	r3, #8
 80054a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e5      	bne.n	800548a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d118      	bne.n	80054f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f023 0310 	bic.w	r3, r3, #16
 80054da:	647b      	str	r3, [r7, #68]	; 0x44
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e4:	61bb      	str	r3, [r7, #24]
 80054e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6979      	ldr	r1, [r7, #20]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	613b      	str	r3, [r7, #16]
   return(result);
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e6      	bne.n	80054c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800550c:	bf00      	nop
 800550e:	3754      	adds	r7, #84	; 0x54
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff fb3a 	bl	8004bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	60bb      	str	r3, [r7, #8]
   return(result);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6979      	ldr	r1, [r7, #20]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	613b      	str	r3, [r7, #16]
   return(result);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e6      	bne.n	800554c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff fb06 	bl	8004b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005590:	bf00      	nop
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b09c      	sub	sp, #112	; 0x70
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b0:	2b22      	cmp	r3, #34	; 0x22
 80055b2:	f040 80b9 	bne.w	8005728 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055c4:	b2d9      	uxtb	r1, r3
 80055c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d0:	400a      	ands	r2, r1
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f040 809c 	bne.w	8005738 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800560e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005614:	66bb      	str	r3, [r7, #104]	; 0x68
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800561e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005620:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800562c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e6      	bne.n	8005600 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3308      	adds	r3, #8
 8005638:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	667b      	str	r3, [r7, #100]	; 0x64
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005652:	647a      	str	r2, [r7, #68]	; 0x44
 8005654:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e5      	bne.n	8005632 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d018      	beq.n	80056ba <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	623b      	str	r3, [r7, #32]
   return(result);
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800569c:	663b      	str	r3, [r7, #96]	; 0x60
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a6:	633b      	str	r3, [r7, #48]	; 0x30
 80056a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e6      	bne.n	8005688 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d12e      	bne.n	8005720 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f023 0310 	bic.w	r3, r3, #16
 80056dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	69b9      	ldr	r1, [r7, #24]
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	617b      	str	r3, [r7, #20]
   return(result);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e6      	bne.n	80056c8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b10      	cmp	r3, #16
 8005706:	d103      	bne.n	8005710 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2210      	movs	r2, #16
 800570e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fa53 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800571e:	e00b      	b.n	8005738 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7fa fe2b 	bl	800037c <HAL_UART_RxCpltCallback>
}
 8005726:	e007      	b.n	8005738 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0208 	orr.w	r2, r2, #8
 8005736:	619a      	str	r2, [r3, #24]
}
 8005738:	bf00      	nop
 800573a:	3770      	adds	r7, #112	; 0x70
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b09c      	sub	sp, #112	; 0x70
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800574e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005758:	2b22      	cmp	r3, #34	; 0x22
 800575a:	f040 80b9 	bne.w	80058d0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005764:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800576e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005772:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005776:	4013      	ands	r3, r2
 8005778:	b29a      	uxth	r2, r3
 800577a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800577c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f040 809c 	bne.w	80058e0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80057b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057bc:	667b      	str	r3, [r7, #100]	; 0x64
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c6:	657b      	str	r3, [r7, #84]	; 0x54
 80057c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e6      	bne.n	80057a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3308      	adds	r3, #8
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	663b      	str	r3, [r7, #96]	; 0x60
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057fa:	643a      	str	r2, [r7, #64]	; 0x40
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e5      	bne.n	80057da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d018      	beq.n	8005862 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	61fb      	str	r3, [r7, #28]
   return(result);
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005850:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e6      	bne.n	8005830 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005866:	2b01      	cmp	r3, #1
 8005868:	d12e      	bne.n	80058c8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	60bb      	str	r3, [r7, #8]
   return(result);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f023 0310 	bic.w	r3, r3, #16
 8005884:	65bb      	str	r3, [r7, #88]	; 0x58
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6979      	ldr	r1, [r7, #20]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	613b      	str	r3, [r7, #16]
   return(result);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e6      	bne.n	8005870 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d103      	bne.n	80058b8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2210      	movs	r2, #16
 80058b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff f97f 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058c6:	e00b      	b.n	80058e0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fa fd57 	bl	800037c <HAL_UART_RxCpltCallback>
}
 80058ce:	e007      	b.n	80058e0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0208 	orr.w	r2, r2, #8
 80058de:	619a      	str	r2, [r3, #24]
}
 80058e0:	bf00      	nop
 80058e2:	3770      	adds	r7, #112	; 0x70
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005904:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005908:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	b29b      	uxth	r3, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	b29b      	uxth	r3, r3
 800591a:	4013      	ands	r3, r2
 800591c:	b29a      	uxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005932:	b084      	sub	sp, #16
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	f107 0014 	add.w	r0, r7, #20
 8005940:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	b004      	add	sp, #16
 8005972:	4770      	bx	lr

08005974 <__errno>:
 8005974:	4b01      	ldr	r3, [pc, #4]	; (800597c <__errno+0x8>)
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	2000008c 	.word	0x2000008c

08005980 <__libc_init_array>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	4d0d      	ldr	r5, [pc, #52]	; (80059b8 <__libc_init_array+0x38>)
 8005984:	4c0d      	ldr	r4, [pc, #52]	; (80059bc <__libc_init_array+0x3c>)
 8005986:	1b64      	subs	r4, r4, r5
 8005988:	10a4      	asrs	r4, r4, #2
 800598a:	2600      	movs	r6, #0
 800598c:	42a6      	cmp	r6, r4
 800598e:	d109      	bne.n	80059a4 <__libc_init_array+0x24>
 8005990:	4d0b      	ldr	r5, [pc, #44]	; (80059c0 <__libc_init_array+0x40>)
 8005992:	4c0c      	ldr	r4, [pc, #48]	; (80059c4 <__libc_init_array+0x44>)
 8005994:	f000 fc8e 	bl	80062b4 <_init>
 8005998:	1b64      	subs	r4, r4, r5
 800599a:	10a4      	asrs	r4, r4, #2
 800599c:	2600      	movs	r6, #0
 800599e:	42a6      	cmp	r6, r4
 80059a0:	d105      	bne.n	80059ae <__libc_init_array+0x2e>
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a8:	4798      	blx	r3
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7ee      	b.n	800598c <__libc_init_array+0xc>
 80059ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b2:	4798      	blx	r3
 80059b4:	3601      	adds	r6, #1
 80059b6:	e7f2      	b.n	800599e <__libc_init_array+0x1e>
 80059b8:	080063bc 	.word	0x080063bc
 80059bc:	080063bc 	.word	0x080063bc
 80059c0:	080063bc 	.word	0x080063bc
 80059c4:	080063c0 	.word	0x080063c0

080059c8 <memset>:
 80059c8:	4402      	add	r2, r0
 80059ca:	4603      	mov	r3, r0
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d100      	bne.n	80059d2 <memset+0xa>
 80059d0:	4770      	bx	lr
 80059d2:	f803 1b01 	strb.w	r1, [r3], #1
 80059d6:	e7f9      	b.n	80059cc <memset+0x4>

080059d8 <siprintf>:
 80059d8:	b40e      	push	{r1, r2, r3}
 80059da:	b500      	push	{lr}
 80059dc:	b09c      	sub	sp, #112	; 0x70
 80059de:	ab1d      	add	r3, sp, #116	; 0x74
 80059e0:	9002      	str	r0, [sp, #8]
 80059e2:	9006      	str	r0, [sp, #24]
 80059e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059e8:	4809      	ldr	r0, [pc, #36]	; (8005a10 <siprintf+0x38>)
 80059ea:	9107      	str	r1, [sp, #28]
 80059ec:	9104      	str	r1, [sp, #16]
 80059ee:	4909      	ldr	r1, [pc, #36]	; (8005a14 <siprintf+0x3c>)
 80059f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f4:	9105      	str	r1, [sp, #20]
 80059f6:	6800      	ldr	r0, [r0, #0]
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	a902      	add	r1, sp, #8
 80059fc:	f000 f868 	bl	8005ad0 <_svfiprintf_r>
 8005a00:	9b02      	ldr	r3, [sp, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	b01c      	add	sp, #112	; 0x70
 8005a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a0c:	b003      	add	sp, #12
 8005a0e:	4770      	bx	lr
 8005a10:	2000008c 	.word	0x2000008c
 8005a14:	ffff0208 	.word	0xffff0208

08005a18 <__ssputs_r>:
 8005a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a1c:	688e      	ldr	r6, [r1, #8]
 8005a1e:	429e      	cmp	r6, r3
 8005a20:	4682      	mov	sl, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	4690      	mov	r8, r2
 8005a26:	461f      	mov	r7, r3
 8005a28:	d838      	bhi.n	8005a9c <__ssputs_r+0x84>
 8005a2a:	898a      	ldrh	r2, [r1, #12]
 8005a2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a30:	d032      	beq.n	8005a98 <__ssputs_r+0x80>
 8005a32:	6825      	ldr	r5, [r4, #0]
 8005a34:	6909      	ldr	r1, [r1, #16]
 8005a36:	eba5 0901 	sub.w	r9, r5, r1
 8005a3a:	6965      	ldr	r5, [r4, #20]
 8005a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a44:	3301      	adds	r3, #1
 8005a46:	444b      	add	r3, r9
 8005a48:	106d      	asrs	r5, r5, #1
 8005a4a:	429d      	cmp	r5, r3
 8005a4c:	bf38      	it	cc
 8005a4e:	461d      	movcc	r5, r3
 8005a50:	0553      	lsls	r3, r2, #21
 8005a52:	d531      	bpl.n	8005ab8 <__ssputs_r+0xa0>
 8005a54:	4629      	mov	r1, r5
 8005a56:	f000 fb63 	bl	8006120 <_malloc_r>
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	b950      	cbnz	r0, 8005a74 <__ssputs_r+0x5c>
 8005a5e:	230c      	movs	r3, #12
 8005a60:	f8ca 3000 	str.w	r3, [sl]
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a74:	6921      	ldr	r1, [r4, #16]
 8005a76:	464a      	mov	r2, r9
 8005a78:	f000 fabe 	bl	8005ff8 <memcpy>
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	6126      	str	r6, [r4, #16]
 8005a8a:	6165      	str	r5, [r4, #20]
 8005a8c:	444e      	add	r6, r9
 8005a8e:	eba5 0509 	sub.w	r5, r5, r9
 8005a92:	6026      	str	r6, [r4, #0]
 8005a94:	60a5      	str	r5, [r4, #8]
 8005a96:	463e      	mov	r6, r7
 8005a98:	42be      	cmp	r6, r7
 8005a9a:	d900      	bls.n	8005a9e <__ssputs_r+0x86>
 8005a9c:	463e      	mov	r6, r7
 8005a9e:	6820      	ldr	r0, [r4, #0]
 8005aa0:	4632      	mov	r2, r6
 8005aa2:	4641      	mov	r1, r8
 8005aa4:	f000 fab6 	bl	8006014 <memmove>
 8005aa8:	68a3      	ldr	r3, [r4, #8]
 8005aaa:	1b9b      	subs	r3, r3, r6
 8005aac:	60a3      	str	r3, [r4, #8]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	4433      	add	r3, r6
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	e7db      	b.n	8005a70 <__ssputs_r+0x58>
 8005ab8:	462a      	mov	r2, r5
 8005aba:	f000 fba5 	bl	8006208 <_realloc_r>
 8005abe:	4606      	mov	r6, r0
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d1e1      	bne.n	8005a88 <__ssputs_r+0x70>
 8005ac4:	6921      	ldr	r1, [r4, #16]
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	f000 fabe 	bl	8006048 <_free_r>
 8005acc:	e7c7      	b.n	8005a5e <__ssputs_r+0x46>
	...

08005ad0 <_svfiprintf_r>:
 8005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	4698      	mov	r8, r3
 8005ad6:	898b      	ldrh	r3, [r1, #12]
 8005ad8:	061b      	lsls	r3, r3, #24
 8005ada:	b09d      	sub	sp, #116	; 0x74
 8005adc:	4607      	mov	r7, r0
 8005ade:	460d      	mov	r5, r1
 8005ae0:	4614      	mov	r4, r2
 8005ae2:	d50e      	bpl.n	8005b02 <_svfiprintf_r+0x32>
 8005ae4:	690b      	ldr	r3, [r1, #16]
 8005ae6:	b963      	cbnz	r3, 8005b02 <_svfiprintf_r+0x32>
 8005ae8:	2140      	movs	r1, #64	; 0x40
 8005aea:	f000 fb19 	bl	8006120 <_malloc_r>
 8005aee:	6028      	str	r0, [r5, #0]
 8005af0:	6128      	str	r0, [r5, #16]
 8005af2:	b920      	cbnz	r0, 8005afe <_svfiprintf_r+0x2e>
 8005af4:	230c      	movs	r3, #12
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	e0d1      	b.n	8005ca2 <_svfiprintf_r+0x1d2>
 8005afe:	2340      	movs	r3, #64	; 0x40
 8005b00:	616b      	str	r3, [r5, #20]
 8005b02:	2300      	movs	r3, #0
 8005b04:	9309      	str	r3, [sp, #36]	; 0x24
 8005b06:	2320      	movs	r3, #32
 8005b08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b10:	2330      	movs	r3, #48	; 0x30
 8005b12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005cbc <_svfiprintf_r+0x1ec>
 8005b16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b1a:	f04f 0901 	mov.w	r9, #1
 8005b1e:	4623      	mov	r3, r4
 8005b20:	469a      	mov	sl, r3
 8005b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b26:	b10a      	cbz	r2, 8005b2c <_svfiprintf_r+0x5c>
 8005b28:	2a25      	cmp	r2, #37	; 0x25
 8005b2a:	d1f9      	bne.n	8005b20 <_svfiprintf_r+0x50>
 8005b2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b30:	d00b      	beq.n	8005b4a <_svfiprintf_r+0x7a>
 8005b32:	465b      	mov	r3, fp
 8005b34:	4622      	mov	r2, r4
 8005b36:	4629      	mov	r1, r5
 8005b38:	4638      	mov	r0, r7
 8005b3a:	f7ff ff6d 	bl	8005a18 <__ssputs_r>
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f000 80aa 	beq.w	8005c98 <_svfiprintf_r+0x1c8>
 8005b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b46:	445a      	add	r2, fp
 8005b48:	9209      	str	r2, [sp, #36]	; 0x24
 8005b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 80a2 	beq.w	8005c98 <_svfiprintf_r+0x1c8>
 8005b54:	2300      	movs	r3, #0
 8005b56:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b5e:	f10a 0a01 	add.w	sl, sl, #1
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	9307      	str	r3, [sp, #28]
 8005b66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b6a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b6c:	4654      	mov	r4, sl
 8005b6e:	2205      	movs	r2, #5
 8005b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b74:	4851      	ldr	r0, [pc, #324]	; (8005cbc <_svfiprintf_r+0x1ec>)
 8005b76:	f7fa fb43 	bl	8000200 <memchr>
 8005b7a:	9a04      	ldr	r2, [sp, #16]
 8005b7c:	b9d8      	cbnz	r0, 8005bb6 <_svfiprintf_r+0xe6>
 8005b7e:	06d0      	lsls	r0, r2, #27
 8005b80:	bf44      	itt	mi
 8005b82:	2320      	movmi	r3, #32
 8005b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b88:	0711      	lsls	r1, r2, #28
 8005b8a:	bf44      	itt	mi
 8005b8c:	232b      	movmi	r3, #43	; 0x2b
 8005b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b92:	f89a 3000 	ldrb.w	r3, [sl]
 8005b96:	2b2a      	cmp	r3, #42	; 0x2a
 8005b98:	d015      	beq.n	8005bc6 <_svfiprintf_r+0xf6>
 8005b9a:	9a07      	ldr	r2, [sp, #28]
 8005b9c:	4654      	mov	r4, sl
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	f04f 0c0a 	mov.w	ip, #10
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005baa:	3b30      	subs	r3, #48	; 0x30
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	d94e      	bls.n	8005c4e <_svfiprintf_r+0x17e>
 8005bb0:	b1b0      	cbz	r0, 8005be0 <_svfiprintf_r+0x110>
 8005bb2:	9207      	str	r2, [sp, #28]
 8005bb4:	e014      	b.n	8005be0 <_svfiprintf_r+0x110>
 8005bb6:	eba0 0308 	sub.w	r3, r0, r8
 8005bba:	fa09 f303 	lsl.w	r3, r9, r3
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	46a2      	mov	sl, r4
 8005bc4:	e7d2      	b.n	8005b6c <_svfiprintf_r+0x9c>
 8005bc6:	9b03      	ldr	r3, [sp, #12]
 8005bc8:	1d19      	adds	r1, r3, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	9103      	str	r1, [sp, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfbb      	ittet	lt
 8005bd2:	425b      	neglt	r3, r3
 8005bd4:	f042 0202 	orrlt.w	r2, r2, #2
 8005bd8:	9307      	strge	r3, [sp, #28]
 8005bda:	9307      	strlt	r3, [sp, #28]
 8005bdc:	bfb8      	it	lt
 8005bde:	9204      	strlt	r2, [sp, #16]
 8005be0:	7823      	ldrb	r3, [r4, #0]
 8005be2:	2b2e      	cmp	r3, #46	; 0x2e
 8005be4:	d10c      	bne.n	8005c00 <_svfiprintf_r+0x130>
 8005be6:	7863      	ldrb	r3, [r4, #1]
 8005be8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bea:	d135      	bne.n	8005c58 <_svfiprintf_r+0x188>
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	1d1a      	adds	r2, r3, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	9203      	str	r2, [sp, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bfb8      	it	lt
 8005bf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bfc:	3402      	adds	r4, #2
 8005bfe:	9305      	str	r3, [sp, #20]
 8005c00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ccc <_svfiprintf_r+0x1fc>
 8005c04:	7821      	ldrb	r1, [r4, #0]
 8005c06:	2203      	movs	r2, #3
 8005c08:	4650      	mov	r0, sl
 8005c0a:	f7fa faf9 	bl	8000200 <memchr>
 8005c0e:	b140      	cbz	r0, 8005c22 <_svfiprintf_r+0x152>
 8005c10:	2340      	movs	r3, #64	; 0x40
 8005c12:	eba0 000a 	sub.w	r0, r0, sl
 8005c16:	fa03 f000 	lsl.w	r0, r3, r0
 8005c1a:	9b04      	ldr	r3, [sp, #16]
 8005c1c:	4303      	orrs	r3, r0
 8005c1e:	3401      	adds	r4, #1
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c26:	4826      	ldr	r0, [pc, #152]	; (8005cc0 <_svfiprintf_r+0x1f0>)
 8005c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c2c:	2206      	movs	r2, #6
 8005c2e:	f7fa fae7 	bl	8000200 <memchr>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d038      	beq.n	8005ca8 <_svfiprintf_r+0x1d8>
 8005c36:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <_svfiprintf_r+0x1f4>)
 8005c38:	bb1b      	cbnz	r3, 8005c82 <_svfiprintf_r+0x1b2>
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	3307      	adds	r3, #7
 8005c3e:	f023 0307 	bic.w	r3, r3, #7
 8005c42:	3308      	adds	r3, #8
 8005c44:	9303      	str	r3, [sp, #12]
 8005c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c48:	4433      	add	r3, r6
 8005c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c4c:	e767      	b.n	8005b1e <_svfiprintf_r+0x4e>
 8005c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c52:	460c      	mov	r4, r1
 8005c54:	2001      	movs	r0, #1
 8005c56:	e7a5      	b.n	8005ba4 <_svfiprintf_r+0xd4>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	3401      	adds	r4, #1
 8005c5c:	9305      	str	r3, [sp, #20]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	f04f 0c0a 	mov.w	ip, #10
 8005c64:	4620      	mov	r0, r4
 8005c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c6a:	3a30      	subs	r2, #48	; 0x30
 8005c6c:	2a09      	cmp	r2, #9
 8005c6e:	d903      	bls.n	8005c78 <_svfiprintf_r+0x1a8>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0c5      	beq.n	8005c00 <_svfiprintf_r+0x130>
 8005c74:	9105      	str	r1, [sp, #20]
 8005c76:	e7c3      	b.n	8005c00 <_svfiprintf_r+0x130>
 8005c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e7f0      	b.n	8005c64 <_svfiprintf_r+0x194>
 8005c82:	ab03      	add	r3, sp, #12
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	462a      	mov	r2, r5
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <_svfiprintf_r+0x1f8>)
 8005c8a:	a904      	add	r1, sp, #16
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	f3af 8000 	nop.w
 8005c92:	1c42      	adds	r2, r0, #1
 8005c94:	4606      	mov	r6, r0
 8005c96:	d1d6      	bne.n	8005c46 <_svfiprintf_r+0x176>
 8005c98:	89ab      	ldrh	r3, [r5, #12]
 8005c9a:	065b      	lsls	r3, r3, #25
 8005c9c:	f53f af2c 	bmi.w	8005af8 <_svfiprintf_r+0x28>
 8005ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ca2:	b01d      	add	sp, #116	; 0x74
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca8:	ab03      	add	r3, sp, #12
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	462a      	mov	r2, r5
 8005cae:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <_svfiprintf_r+0x1f8>)
 8005cb0:	a904      	add	r1, sp, #16
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	f000 f87a 	bl	8005dac <_printf_i>
 8005cb8:	e7eb      	b.n	8005c92 <_svfiprintf_r+0x1c2>
 8005cba:	bf00      	nop
 8005cbc:	08006388 	.word	0x08006388
 8005cc0:	08006392 	.word	0x08006392
 8005cc4:	00000000 	.word	0x00000000
 8005cc8:	08005a19 	.word	0x08005a19
 8005ccc:	0800638e 	.word	0x0800638e

08005cd0 <_printf_common>:
 8005cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd4:	4616      	mov	r6, r2
 8005cd6:	4699      	mov	r9, r3
 8005cd8:	688a      	ldr	r2, [r1, #8]
 8005cda:	690b      	ldr	r3, [r1, #16]
 8005cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	bfb8      	it	lt
 8005ce4:	4613      	movlt	r3, r2
 8005ce6:	6033      	str	r3, [r6, #0]
 8005ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cec:	4607      	mov	r7, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	b10a      	cbz	r2, 8005cf6 <_printf_common+0x26>
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	6033      	str	r3, [r6, #0]
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	0699      	lsls	r1, r3, #26
 8005cfa:	bf42      	ittt	mi
 8005cfc:	6833      	ldrmi	r3, [r6, #0]
 8005cfe:	3302      	addmi	r3, #2
 8005d00:	6033      	strmi	r3, [r6, #0]
 8005d02:	6825      	ldr	r5, [r4, #0]
 8005d04:	f015 0506 	ands.w	r5, r5, #6
 8005d08:	d106      	bne.n	8005d18 <_printf_common+0x48>
 8005d0a:	f104 0a19 	add.w	sl, r4, #25
 8005d0e:	68e3      	ldr	r3, [r4, #12]
 8005d10:	6832      	ldr	r2, [r6, #0]
 8005d12:	1a9b      	subs	r3, r3, r2
 8005d14:	42ab      	cmp	r3, r5
 8005d16:	dc26      	bgt.n	8005d66 <_printf_common+0x96>
 8005d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d1c:	1e13      	subs	r3, r2, #0
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	bf18      	it	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	0692      	lsls	r2, r2, #26
 8005d26:	d42b      	bmi.n	8005d80 <_printf_common+0xb0>
 8005d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	4638      	mov	r0, r7
 8005d30:	47c0      	blx	r8
 8005d32:	3001      	adds	r0, #1
 8005d34:	d01e      	beq.n	8005d74 <_printf_common+0xa4>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	68e5      	ldr	r5, [r4, #12]
 8005d3a:	6832      	ldr	r2, [r6, #0]
 8005d3c:	f003 0306 	and.w	r3, r3, #6
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	bf08      	it	eq
 8005d44:	1aad      	subeq	r5, r5, r2
 8005d46:	68a3      	ldr	r3, [r4, #8]
 8005d48:	6922      	ldr	r2, [r4, #16]
 8005d4a:	bf0c      	ite	eq
 8005d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d50:	2500      	movne	r5, #0
 8005d52:	4293      	cmp	r3, r2
 8005d54:	bfc4      	itt	gt
 8005d56:	1a9b      	subgt	r3, r3, r2
 8005d58:	18ed      	addgt	r5, r5, r3
 8005d5a:	2600      	movs	r6, #0
 8005d5c:	341a      	adds	r4, #26
 8005d5e:	42b5      	cmp	r5, r6
 8005d60:	d11a      	bne.n	8005d98 <_printf_common+0xc8>
 8005d62:	2000      	movs	r0, #0
 8005d64:	e008      	b.n	8005d78 <_printf_common+0xa8>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4652      	mov	r2, sl
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	47c0      	blx	r8
 8005d70:	3001      	adds	r0, #1
 8005d72:	d103      	bne.n	8005d7c <_printf_common+0xac>
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7c:	3501      	adds	r5, #1
 8005d7e:	e7c6      	b.n	8005d0e <_printf_common+0x3e>
 8005d80:	18e1      	adds	r1, r4, r3
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	2030      	movs	r0, #48	; 0x30
 8005d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d8a:	4422      	add	r2, r4
 8005d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d94:	3302      	adds	r3, #2
 8005d96:	e7c7      	b.n	8005d28 <_printf_common+0x58>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	4622      	mov	r2, r4
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	4638      	mov	r0, r7
 8005da0:	47c0      	blx	r8
 8005da2:	3001      	adds	r0, #1
 8005da4:	d0e6      	beq.n	8005d74 <_printf_common+0xa4>
 8005da6:	3601      	adds	r6, #1
 8005da8:	e7d9      	b.n	8005d5e <_printf_common+0x8e>
	...

08005dac <_printf_i>:
 8005dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	7e0f      	ldrb	r7, [r1, #24]
 8005db2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005db4:	2f78      	cmp	r7, #120	; 0x78
 8005db6:	4691      	mov	r9, r2
 8005db8:	4680      	mov	r8, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	469a      	mov	sl, r3
 8005dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dc2:	d807      	bhi.n	8005dd4 <_printf_i+0x28>
 8005dc4:	2f62      	cmp	r7, #98	; 0x62
 8005dc6:	d80a      	bhi.n	8005dde <_printf_i+0x32>
 8005dc8:	2f00      	cmp	r7, #0
 8005dca:	f000 80d8 	beq.w	8005f7e <_printf_i+0x1d2>
 8005dce:	2f58      	cmp	r7, #88	; 0x58
 8005dd0:	f000 80a3 	beq.w	8005f1a <_printf_i+0x16e>
 8005dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ddc:	e03a      	b.n	8005e54 <_printf_i+0xa8>
 8005dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005de2:	2b15      	cmp	r3, #21
 8005de4:	d8f6      	bhi.n	8005dd4 <_printf_i+0x28>
 8005de6:	a101      	add	r1, pc, #4	; (adr r1, 8005dec <_printf_i+0x40>)
 8005de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dec:	08005e45 	.word	0x08005e45
 8005df0:	08005e59 	.word	0x08005e59
 8005df4:	08005dd5 	.word	0x08005dd5
 8005df8:	08005dd5 	.word	0x08005dd5
 8005dfc:	08005dd5 	.word	0x08005dd5
 8005e00:	08005dd5 	.word	0x08005dd5
 8005e04:	08005e59 	.word	0x08005e59
 8005e08:	08005dd5 	.word	0x08005dd5
 8005e0c:	08005dd5 	.word	0x08005dd5
 8005e10:	08005dd5 	.word	0x08005dd5
 8005e14:	08005dd5 	.word	0x08005dd5
 8005e18:	08005f65 	.word	0x08005f65
 8005e1c:	08005e89 	.word	0x08005e89
 8005e20:	08005f47 	.word	0x08005f47
 8005e24:	08005dd5 	.word	0x08005dd5
 8005e28:	08005dd5 	.word	0x08005dd5
 8005e2c:	08005f87 	.word	0x08005f87
 8005e30:	08005dd5 	.word	0x08005dd5
 8005e34:	08005e89 	.word	0x08005e89
 8005e38:	08005dd5 	.word	0x08005dd5
 8005e3c:	08005dd5 	.word	0x08005dd5
 8005e40:	08005f4f 	.word	0x08005f4f
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	1d1a      	adds	r2, r3, #4
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	602a      	str	r2, [r5, #0]
 8005e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0a3      	b.n	8005fa0 <_printf_i+0x1f4>
 8005e58:	6820      	ldr	r0, [r4, #0]
 8005e5a:	6829      	ldr	r1, [r5, #0]
 8005e5c:	0606      	lsls	r6, r0, #24
 8005e5e:	f101 0304 	add.w	r3, r1, #4
 8005e62:	d50a      	bpl.n	8005e7a <_printf_i+0xce>
 8005e64:	680e      	ldr	r6, [r1, #0]
 8005e66:	602b      	str	r3, [r5, #0]
 8005e68:	2e00      	cmp	r6, #0
 8005e6a:	da03      	bge.n	8005e74 <_printf_i+0xc8>
 8005e6c:	232d      	movs	r3, #45	; 0x2d
 8005e6e:	4276      	negs	r6, r6
 8005e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e74:	485e      	ldr	r0, [pc, #376]	; (8005ff0 <_printf_i+0x244>)
 8005e76:	230a      	movs	r3, #10
 8005e78:	e019      	b.n	8005eae <_printf_i+0x102>
 8005e7a:	680e      	ldr	r6, [r1, #0]
 8005e7c:	602b      	str	r3, [r5, #0]
 8005e7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e82:	bf18      	it	ne
 8005e84:	b236      	sxthne	r6, r6
 8005e86:	e7ef      	b.n	8005e68 <_printf_i+0xbc>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	6820      	ldr	r0, [r4, #0]
 8005e8c:	1d19      	adds	r1, r3, #4
 8005e8e:	6029      	str	r1, [r5, #0]
 8005e90:	0601      	lsls	r1, r0, #24
 8005e92:	d501      	bpl.n	8005e98 <_printf_i+0xec>
 8005e94:	681e      	ldr	r6, [r3, #0]
 8005e96:	e002      	b.n	8005e9e <_printf_i+0xf2>
 8005e98:	0646      	lsls	r6, r0, #25
 8005e9a:	d5fb      	bpl.n	8005e94 <_printf_i+0xe8>
 8005e9c:	881e      	ldrh	r6, [r3, #0]
 8005e9e:	4854      	ldr	r0, [pc, #336]	; (8005ff0 <_printf_i+0x244>)
 8005ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2308      	moveq	r3, #8
 8005ea6:	230a      	movne	r3, #10
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eae:	6865      	ldr	r5, [r4, #4]
 8005eb0:	60a5      	str	r5, [r4, #8]
 8005eb2:	2d00      	cmp	r5, #0
 8005eb4:	bfa2      	ittt	ge
 8005eb6:	6821      	ldrge	r1, [r4, #0]
 8005eb8:	f021 0104 	bicge.w	r1, r1, #4
 8005ebc:	6021      	strge	r1, [r4, #0]
 8005ebe:	b90e      	cbnz	r6, 8005ec4 <_printf_i+0x118>
 8005ec0:	2d00      	cmp	r5, #0
 8005ec2:	d04d      	beq.n	8005f60 <_printf_i+0x1b4>
 8005ec4:	4615      	mov	r5, r2
 8005ec6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005eca:	fb03 6711 	mls	r7, r3, r1, r6
 8005ece:	5dc7      	ldrb	r7, [r0, r7]
 8005ed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ed4:	4637      	mov	r7, r6
 8005ed6:	42bb      	cmp	r3, r7
 8005ed8:	460e      	mov	r6, r1
 8005eda:	d9f4      	bls.n	8005ec6 <_printf_i+0x11a>
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d10b      	bne.n	8005ef8 <_printf_i+0x14c>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	07de      	lsls	r6, r3, #31
 8005ee4:	d508      	bpl.n	8005ef8 <_printf_i+0x14c>
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	6861      	ldr	r1, [r4, #4]
 8005eea:	4299      	cmp	r1, r3
 8005eec:	bfde      	ittt	le
 8005eee:	2330      	movle	r3, #48	; 0x30
 8005ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ef8:	1b52      	subs	r2, r2, r5
 8005efa:	6122      	str	r2, [r4, #16]
 8005efc:	f8cd a000 	str.w	sl, [sp]
 8005f00:	464b      	mov	r3, r9
 8005f02:	aa03      	add	r2, sp, #12
 8005f04:	4621      	mov	r1, r4
 8005f06:	4640      	mov	r0, r8
 8005f08:	f7ff fee2 	bl	8005cd0 <_printf_common>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d14c      	bne.n	8005faa <_printf_i+0x1fe>
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	b004      	add	sp, #16
 8005f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1a:	4835      	ldr	r0, [pc, #212]	; (8005ff0 <_printf_i+0x244>)
 8005f1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f20:	6829      	ldr	r1, [r5, #0]
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f28:	6029      	str	r1, [r5, #0]
 8005f2a:	061d      	lsls	r5, r3, #24
 8005f2c:	d514      	bpl.n	8005f58 <_printf_i+0x1ac>
 8005f2e:	07df      	lsls	r7, r3, #31
 8005f30:	bf44      	itt	mi
 8005f32:	f043 0320 	orrmi.w	r3, r3, #32
 8005f36:	6023      	strmi	r3, [r4, #0]
 8005f38:	b91e      	cbnz	r6, 8005f42 <_printf_i+0x196>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	f023 0320 	bic.w	r3, r3, #32
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	2310      	movs	r3, #16
 8005f44:	e7b0      	b.n	8005ea8 <_printf_i+0xfc>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	f043 0320 	orr.w	r3, r3, #32
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	2378      	movs	r3, #120	; 0x78
 8005f50:	4828      	ldr	r0, [pc, #160]	; (8005ff4 <_printf_i+0x248>)
 8005f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f56:	e7e3      	b.n	8005f20 <_printf_i+0x174>
 8005f58:	0659      	lsls	r1, r3, #25
 8005f5a:	bf48      	it	mi
 8005f5c:	b2b6      	uxthmi	r6, r6
 8005f5e:	e7e6      	b.n	8005f2e <_printf_i+0x182>
 8005f60:	4615      	mov	r5, r2
 8005f62:	e7bb      	b.n	8005edc <_printf_i+0x130>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	6826      	ldr	r6, [r4, #0]
 8005f68:	6961      	ldr	r1, [r4, #20]
 8005f6a:	1d18      	adds	r0, r3, #4
 8005f6c:	6028      	str	r0, [r5, #0]
 8005f6e:	0635      	lsls	r5, r6, #24
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	d501      	bpl.n	8005f78 <_printf_i+0x1cc>
 8005f74:	6019      	str	r1, [r3, #0]
 8005f76:	e002      	b.n	8005f7e <_printf_i+0x1d2>
 8005f78:	0670      	lsls	r0, r6, #25
 8005f7a:	d5fb      	bpl.n	8005f74 <_printf_i+0x1c8>
 8005f7c:	8019      	strh	r1, [r3, #0]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	4615      	mov	r5, r2
 8005f84:	e7ba      	b.n	8005efc <_printf_i+0x150>
 8005f86:	682b      	ldr	r3, [r5, #0]
 8005f88:	1d1a      	adds	r2, r3, #4
 8005f8a:	602a      	str	r2, [r5, #0]
 8005f8c:	681d      	ldr	r5, [r3, #0]
 8005f8e:	6862      	ldr	r2, [r4, #4]
 8005f90:	2100      	movs	r1, #0
 8005f92:	4628      	mov	r0, r5
 8005f94:	f7fa f934 	bl	8000200 <memchr>
 8005f98:	b108      	cbz	r0, 8005f9e <_printf_i+0x1f2>
 8005f9a:	1b40      	subs	r0, r0, r5
 8005f9c:	6060      	str	r0, [r4, #4]
 8005f9e:	6863      	ldr	r3, [r4, #4]
 8005fa0:	6123      	str	r3, [r4, #16]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa8:	e7a8      	b.n	8005efc <_printf_i+0x150>
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	462a      	mov	r2, r5
 8005fae:	4649      	mov	r1, r9
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	47d0      	blx	sl
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d0ab      	beq.n	8005f10 <_printf_i+0x164>
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	079b      	lsls	r3, r3, #30
 8005fbc:	d413      	bmi.n	8005fe6 <_printf_i+0x23a>
 8005fbe:	68e0      	ldr	r0, [r4, #12]
 8005fc0:	9b03      	ldr	r3, [sp, #12]
 8005fc2:	4298      	cmp	r0, r3
 8005fc4:	bfb8      	it	lt
 8005fc6:	4618      	movlt	r0, r3
 8005fc8:	e7a4      	b.n	8005f14 <_printf_i+0x168>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4632      	mov	r2, r6
 8005fce:	4649      	mov	r1, r9
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	47d0      	blx	sl
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d09b      	beq.n	8005f10 <_printf_i+0x164>
 8005fd8:	3501      	adds	r5, #1
 8005fda:	68e3      	ldr	r3, [r4, #12]
 8005fdc:	9903      	ldr	r1, [sp, #12]
 8005fde:	1a5b      	subs	r3, r3, r1
 8005fe0:	42ab      	cmp	r3, r5
 8005fe2:	dcf2      	bgt.n	8005fca <_printf_i+0x21e>
 8005fe4:	e7eb      	b.n	8005fbe <_printf_i+0x212>
 8005fe6:	2500      	movs	r5, #0
 8005fe8:	f104 0619 	add.w	r6, r4, #25
 8005fec:	e7f5      	b.n	8005fda <_printf_i+0x22e>
 8005fee:	bf00      	nop
 8005ff0:	08006399 	.word	0x08006399
 8005ff4:	080063aa 	.word	0x080063aa

08005ff8 <memcpy>:
 8005ff8:	440a      	add	r2, r1
 8005ffa:	4291      	cmp	r1, r2
 8005ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006000:	d100      	bne.n	8006004 <memcpy+0xc>
 8006002:	4770      	bx	lr
 8006004:	b510      	push	{r4, lr}
 8006006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800600a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800600e:	4291      	cmp	r1, r2
 8006010:	d1f9      	bne.n	8006006 <memcpy+0xe>
 8006012:	bd10      	pop	{r4, pc}

08006014 <memmove>:
 8006014:	4288      	cmp	r0, r1
 8006016:	b510      	push	{r4, lr}
 8006018:	eb01 0402 	add.w	r4, r1, r2
 800601c:	d902      	bls.n	8006024 <memmove+0x10>
 800601e:	4284      	cmp	r4, r0
 8006020:	4623      	mov	r3, r4
 8006022:	d807      	bhi.n	8006034 <memmove+0x20>
 8006024:	1e43      	subs	r3, r0, #1
 8006026:	42a1      	cmp	r1, r4
 8006028:	d008      	beq.n	800603c <memmove+0x28>
 800602a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800602e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006032:	e7f8      	b.n	8006026 <memmove+0x12>
 8006034:	4402      	add	r2, r0
 8006036:	4601      	mov	r1, r0
 8006038:	428a      	cmp	r2, r1
 800603a:	d100      	bne.n	800603e <memmove+0x2a>
 800603c:	bd10      	pop	{r4, pc}
 800603e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006046:	e7f7      	b.n	8006038 <memmove+0x24>

08006048 <_free_r>:
 8006048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800604a:	2900      	cmp	r1, #0
 800604c:	d044      	beq.n	80060d8 <_free_r+0x90>
 800604e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006052:	9001      	str	r0, [sp, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f1a1 0404 	sub.w	r4, r1, #4
 800605a:	bfb8      	it	lt
 800605c:	18e4      	addlt	r4, r4, r3
 800605e:	f000 f913 	bl	8006288 <__malloc_lock>
 8006062:	4a1e      	ldr	r2, [pc, #120]	; (80060dc <_free_r+0x94>)
 8006064:	9801      	ldr	r0, [sp, #4]
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	b933      	cbnz	r3, 8006078 <_free_r+0x30>
 800606a:	6063      	str	r3, [r4, #4]
 800606c:	6014      	str	r4, [r2, #0]
 800606e:	b003      	add	sp, #12
 8006070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006074:	f000 b90e 	b.w	8006294 <__malloc_unlock>
 8006078:	42a3      	cmp	r3, r4
 800607a:	d908      	bls.n	800608e <_free_r+0x46>
 800607c:	6825      	ldr	r5, [r4, #0]
 800607e:	1961      	adds	r1, r4, r5
 8006080:	428b      	cmp	r3, r1
 8006082:	bf01      	itttt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	1949      	addeq	r1, r1, r5
 800608a:	6021      	streq	r1, [r4, #0]
 800608c:	e7ed      	b.n	800606a <_free_r+0x22>
 800608e:	461a      	mov	r2, r3
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	b10b      	cbz	r3, 8006098 <_free_r+0x50>
 8006094:	42a3      	cmp	r3, r4
 8006096:	d9fa      	bls.n	800608e <_free_r+0x46>
 8006098:	6811      	ldr	r1, [r2, #0]
 800609a:	1855      	adds	r5, r2, r1
 800609c:	42a5      	cmp	r5, r4
 800609e:	d10b      	bne.n	80060b8 <_free_r+0x70>
 80060a0:	6824      	ldr	r4, [r4, #0]
 80060a2:	4421      	add	r1, r4
 80060a4:	1854      	adds	r4, r2, r1
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	6011      	str	r1, [r2, #0]
 80060aa:	d1e0      	bne.n	800606e <_free_r+0x26>
 80060ac:	681c      	ldr	r4, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	6053      	str	r3, [r2, #4]
 80060b2:	4421      	add	r1, r4
 80060b4:	6011      	str	r1, [r2, #0]
 80060b6:	e7da      	b.n	800606e <_free_r+0x26>
 80060b8:	d902      	bls.n	80060c0 <_free_r+0x78>
 80060ba:	230c      	movs	r3, #12
 80060bc:	6003      	str	r3, [r0, #0]
 80060be:	e7d6      	b.n	800606e <_free_r+0x26>
 80060c0:	6825      	ldr	r5, [r4, #0]
 80060c2:	1961      	adds	r1, r4, r5
 80060c4:	428b      	cmp	r3, r1
 80060c6:	bf04      	itt	eq
 80060c8:	6819      	ldreq	r1, [r3, #0]
 80060ca:	685b      	ldreq	r3, [r3, #4]
 80060cc:	6063      	str	r3, [r4, #4]
 80060ce:	bf04      	itt	eq
 80060d0:	1949      	addeq	r1, r1, r5
 80060d2:	6021      	streq	r1, [r4, #0]
 80060d4:	6054      	str	r4, [r2, #4]
 80060d6:	e7ca      	b.n	800606e <_free_r+0x26>
 80060d8:	b003      	add	sp, #12
 80060da:	bd30      	pop	{r4, r5, pc}
 80060dc:	200005ec 	.word	0x200005ec

080060e0 <sbrk_aligned>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	4e0e      	ldr	r6, [pc, #56]	; (800611c <sbrk_aligned+0x3c>)
 80060e4:	460c      	mov	r4, r1
 80060e6:	6831      	ldr	r1, [r6, #0]
 80060e8:	4605      	mov	r5, r0
 80060ea:	b911      	cbnz	r1, 80060f2 <sbrk_aligned+0x12>
 80060ec:	f000 f8bc 	bl	8006268 <_sbrk_r>
 80060f0:	6030      	str	r0, [r6, #0]
 80060f2:	4621      	mov	r1, r4
 80060f4:	4628      	mov	r0, r5
 80060f6:	f000 f8b7 	bl	8006268 <_sbrk_r>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	d00a      	beq.n	8006114 <sbrk_aligned+0x34>
 80060fe:	1cc4      	adds	r4, r0, #3
 8006100:	f024 0403 	bic.w	r4, r4, #3
 8006104:	42a0      	cmp	r0, r4
 8006106:	d007      	beq.n	8006118 <sbrk_aligned+0x38>
 8006108:	1a21      	subs	r1, r4, r0
 800610a:	4628      	mov	r0, r5
 800610c:	f000 f8ac 	bl	8006268 <_sbrk_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d101      	bne.n	8006118 <sbrk_aligned+0x38>
 8006114:	f04f 34ff 	mov.w	r4, #4294967295
 8006118:	4620      	mov	r0, r4
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	200005f0 	.word	0x200005f0

08006120 <_malloc_r>:
 8006120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006124:	1ccd      	adds	r5, r1, #3
 8006126:	f025 0503 	bic.w	r5, r5, #3
 800612a:	3508      	adds	r5, #8
 800612c:	2d0c      	cmp	r5, #12
 800612e:	bf38      	it	cc
 8006130:	250c      	movcc	r5, #12
 8006132:	2d00      	cmp	r5, #0
 8006134:	4607      	mov	r7, r0
 8006136:	db01      	blt.n	800613c <_malloc_r+0x1c>
 8006138:	42a9      	cmp	r1, r5
 800613a:	d905      	bls.n	8006148 <_malloc_r+0x28>
 800613c:	230c      	movs	r3, #12
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	2600      	movs	r6, #0
 8006142:	4630      	mov	r0, r6
 8006144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006148:	4e2e      	ldr	r6, [pc, #184]	; (8006204 <_malloc_r+0xe4>)
 800614a:	f000 f89d 	bl	8006288 <__malloc_lock>
 800614e:	6833      	ldr	r3, [r6, #0]
 8006150:	461c      	mov	r4, r3
 8006152:	bb34      	cbnz	r4, 80061a2 <_malloc_r+0x82>
 8006154:	4629      	mov	r1, r5
 8006156:	4638      	mov	r0, r7
 8006158:	f7ff ffc2 	bl	80060e0 <sbrk_aligned>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	4604      	mov	r4, r0
 8006160:	d14d      	bne.n	80061fe <_malloc_r+0xde>
 8006162:	6834      	ldr	r4, [r6, #0]
 8006164:	4626      	mov	r6, r4
 8006166:	2e00      	cmp	r6, #0
 8006168:	d140      	bne.n	80061ec <_malloc_r+0xcc>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	4631      	mov	r1, r6
 800616e:	4638      	mov	r0, r7
 8006170:	eb04 0803 	add.w	r8, r4, r3
 8006174:	f000 f878 	bl	8006268 <_sbrk_r>
 8006178:	4580      	cmp	r8, r0
 800617a:	d13a      	bne.n	80061f2 <_malloc_r+0xd2>
 800617c:	6821      	ldr	r1, [r4, #0]
 800617e:	3503      	adds	r5, #3
 8006180:	1a6d      	subs	r5, r5, r1
 8006182:	f025 0503 	bic.w	r5, r5, #3
 8006186:	3508      	adds	r5, #8
 8006188:	2d0c      	cmp	r5, #12
 800618a:	bf38      	it	cc
 800618c:	250c      	movcc	r5, #12
 800618e:	4629      	mov	r1, r5
 8006190:	4638      	mov	r0, r7
 8006192:	f7ff ffa5 	bl	80060e0 <sbrk_aligned>
 8006196:	3001      	adds	r0, #1
 8006198:	d02b      	beq.n	80061f2 <_malloc_r+0xd2>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	442b      	add	r3, r5
 800619e:	6023      	str	r3, [r4, #0]
 80061a0:	e00e      	b.n	80061c0 <_malloc_r+0xa0>
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	1b52      	subs	r2, r2, r5
 80061a6:	d41e      	bmi.n	80061e6 <_malloc_r+0xc6>
 80061a8:	2a0b      	cmp	r2, #11
 80061aa:	d916      	bls.n	80061da <_malloc_r+0xba>
 80061ac:	1961      	adds	r1, r4, r5
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	6025      	str	r5, [r4, #0]
 80061b2:	bf18      	it	ne
 80061b4:	6059      	strne	r1, [r3, #4]
 80061b6:	6863      	ldr	r3, [r4, #4]
 80061b8:	bf08      	it	eq
 80061ba:	6031      	streq	r1, [r6, #0]
 80061bc:	5162      	str	r2, [r4, r5]
 80061be:	604b      	str	r3, [r1, #4]
 80061c0:	4638      	mov	r0, r7
 80061c2:	f104 060b 	add.w	r6, r4, #11
 80061c6:	f000 f865 	bl	8006294 <__malloc_unlock>
 80061ca:	f026 0607 	bic.w	r6, r6, #7
 80061ce:	1d23      	adds	r3, r4, #4
 80061d0:	1af2      	subs	r2, r6, r3
 80061d2:	d0b6      	beq.n	8006142 <_malloc_r+0x22>
 80061d4:	1b9b      	subs	r3, r3, r6
 80061d6:	50a3      	str	r3, [r4, r2]
 80061d8:	e7b3      	b.n	8006142 <_malloc_r+0x22>
 80061da:	6862      	ldr	r2, [r4, #4]
 80061dc:	42a3      	cmp	r3, r4
 80061de:	bf0c      	ite	eq
 80061e0:	6032      	streq	r2, [r6, #0]
 80061e2:	605a      	strne	r2, [r3, #4]
 80061e4:	e7ec      	b.n	80061c0 <_malloc_r+0xa0>
 80061e6:	4623      	mov	r3, r4
 80061e8:	6864      	ldr	r4, [r4, #4]
 80061ea:	e7b2      	b.n	8006152 <_malloc_r+0x32>
 80061ec:	4634      	mov	r4, r6
 80061ee:	6876      	ldr	r6, [r6, #4]
 80061f0:	e7b9      	b.n	8006166 <_malloc_r+0x46>
 80061f2:	230c      	movs	r3, #12
 80061f4:	603b      	str	r3, [r7, #0]
 80061f6:	4638      	mov	r0, r7
 80061f8:	f000 f84c 	bl	8006294 <__malloc_unlock>
 80061fc:	e7a1      	b.n	8006142 <_malloc_r+0x22>
 80061fe:	6025      	str	r5, [r4, #0]
 8006200:	e7de      	b.n	80061c0 <_malloc_r+0xa0>
 8006202:	bf00      	nop
 8006204:	200005ec 	.word	0x200005ec

08006208 <_realloc_r>:
 8006208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620c:	4680      	mov	r8, r0
 800620e:	4614      	mov	r4, r2
 8006210:	460e      	mov	r6, r1
 8006212:	b921      	cbnz	r1, 800621e <_realloc_r+0x16>
 8006214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006218:	4611      	mov	r1, r2
 800621a:	f7ff bf81 	b.w	8006120 <_malloc_r>
 800621e:	b92a      	cbnz	r2, 800622c <_realloc_r+0x24>
 8006220:	f7ff ff12 	bl	8006048 <_free_r>
 8006224:	4625      	mov	r5, r4
 8006226:	4628      	mov	r0, r5
 8006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622c:	f000 f838 	bl	80062a0 <_malloc_usable_size_r>
 8006230:	4284      	cmp	r4, r0
 8006232:	4607      	mov	r7, r0
 8006234:	d802      	bhi.n	800623c <_realloc_r+0x34>
 8006236:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800623a:	d812      	bhi.n	8006262 <_realloc_r+0x5a>
 800623c:	4621      	mov	r1, r4
 800623e:	4640      	mov	r0, r8
 8006240:	f7ff ff6e 	bl	8006120 <_malloc_r>
 8006244:	4605      	mov	r5, r0
 8006246:	2800      	cmp	r0, #0
 8006248:	d0ed      	beq.n	8006226 <_realloc_r+0x1e>
 800624a:	42bc      	cmp	r4, r7
 800624c:	4622      	mov	r2, r4
 800624e:	4631      	mov	r1, r6
 8006250:	bf28      	it	cs
 8006252:	463a      	movcs	r2, r7
 8006254:	f7ff fed0 	bl	8005ff8 <memcpy>
 8006258:	4631      	mov	r1, r6
 800625a:	4640      	mov	r0, r8
 800625c:	f7ff fef4 	bl	8006048 <_free_r>
 8006260:	e7e1      	b.n	8006226 <_realloc_r+0x1e>
 8006262:	4635      	mov	r5, r6
 8006264:	e7df      	b.n	8006226 <_realloc_r+0x1e>
	...

08006268 <_sbrk_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4d06      	ldr	r5, [pc, #24]	; (8006284 <_sbrk_r+0x1c>)
 800626c:	2300      	movs	r3, #0
 800626e:	4604      	mov	r4, r0
 8006270:	4608      	mov	r0, r1
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	f7fb f858 	bl	8001328 <_sbrk>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d102      	bne.n	8006282 <_sbrk_r+0x1a>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	b103      	cbz	r3, 8006282 <_sbrk_r+0x1a>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	200005f4 	.word	0x200005f4

08006288 <__malloc_lock>:
 8006288:	4801      	ldr	r0, [pc, #4]	; (8006290 <__malloc_lock+0x8>)
 800628a:	f000 b811 	b.w	80062b0 <__retarget_lock_acquire_recursive>
 800628e:	bf00      	nop
 8006290:	200005f8 	.word	0x200005f8

08006294 <__malloc_unlock>:
 8006294:	4801      	ldr	r0, [pc, #4]	; (800629c <__malloc_unlock+0x8>)
 8006296:	f000 b80c 	b.w	80062b2 <__retarget_lock_release_recursive>
 800629a:	bf00      	nop
 800629c:	200005f8 	.word	0x200005f8

080062a0 <_malloc_usable_size_r>:
 80062a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a4:	1f18      	subs	r0, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bfbc      	itt	lt
 80062aa:	580b      	ldrlt	r3, [r1, r0]
 80062ac:	18c0      	addlt	r0, r0, r3
 80062ae:	4770      	bx	lr

080062b0 <__retarget_lock_acquire_recursive>:
 80062b0:	4770      	bx	lr

080062b2 <__retarget_lock_release_recursive>:
 80062b2:	4770      	bx	lr

080062b4 <_init>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr

080062c0 <_fini>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr
